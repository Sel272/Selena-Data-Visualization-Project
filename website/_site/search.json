[
  {
    "objectID": "project_summary.html",
    "href": "project_summary.html",
    "title": "Bring the Washington Nationals Back to MLB Championship Contention",
    "section": "",
    "text": "First, let’s get an overview of the season records for the Washington Nationals in 2019 and 2023. By comparing the 2019 and 2023 Washington Nationals season records side-by-side, it is evident that the 2023 season generally performed much worse than 2019. It featured more blowout losses and fewer wins with margins greater than 5. There was no specific seasonal pattern for 2023. For example, some teams might start to have a poor record after a mid-season trade or a significant injury, but none of these factors were apparent for the 2023 season. In contrast, during the 2019 season, the team improved and developed better chemistry after about one-third of the season, around 50 games. Overall, the 2023 team performed significantly worse than the 2019 team throughout the season.\n\n\nCode\n# Load the data\nlibrary(plotly)\nlibrary(tidyverse)\nrecord_2019 &lt;- read_csv(\"../data/2019_record.csv\") \n# https://www.baseball-reference.com/teams/WSN/2019-schedule-scores.shtml\n\n# Create the margin graphs by selecting the columns and calculating margins as R-RA\nrecord_2019_v1 &lt;- record_2019 %&gt;% select('W/L','R','RA','Gm#','Opp') %&gt;% mutate(Margin=R-RA) %&gt;% mutate(`W/L`=ifelse(R&gt;RA,\"W\",\"L\"))\nrecord_2019_v1 &lt;- record_2019_v1 %&gt;% mutate(hover_text = paste(\"Opponent Team:\", Opp, \"&lt;br&gt;Margin:\", Margin,\"&lt;br&gt;Result:\",`W/L`))  # Add a hover text column\n\n# Create the ggplot object\np_2019 &lt;- ggplot(record_2019_v1, aes(x = `Gm#`, y = Margin, fill = `W/L`,text = hover_text)) +\n  geom_col(position = \"dodge\") +\n  scale_fill_manual(values = c(\"W\" = \"green\", \"L\" = \"red\")) +\n  xlab('Game Played') + \n  labs(title = \"2019 Season Nationals Game Results\") +\n  theme_minimal()\n\n# Convert to plotly object for interactivity\nplotly_2019 &lt;- ggplotly(p_2019, tooltip = \"text\")  # Ensure tooltips are added\n\n# Print the Plotly object\nplotly_2019\n\n\n\n\nFigure 1: Margin Graph for Washington Nationals Records in 2019. The chart displays the game results, game margins, and opposing teams for each game of the 2019 season. The x-axis represents the games played, and the y-axis shows the results. Data was obtained from https://www.baseball-reference.com/teams/WSN/2019-schedule-scores.shtml.\n\n\n\n\nCode\n# Load the data\nlibrary(plotly)\nlibrary(tidyverse)\nrecord_2023 &lt;- read_csv(\"../data/2023_record.csv\")\n# https://www.baseball-reference.com/teams/WSN/2023-schedule-scores.shtml\n\n# Create the margin graphs by selecting the columns and calculating margins as R-RA\n# Calculate average margin by month\nrecord_2023_v1 &lt;- record_2023 %&gt;% select('W/L','R','RA','Gm#','Date','Opp') %&gt;% mutate(Margin=R-RA) %&gt;% mutate(`W/L`=ifelse(R&gt;RA,\"W\",\"L\")) %&gt;% mutate(hover_text = paste(\"Opponent Team:\", Opp, \"&lt;br&gt;Margin:\", Margin,\"&lt;br&gt;Result:\",`W/L`))  # Add a hover text column\n\n# record_2023_v1 &lt;- record_2023 %&gt;% select('W/L','R','RA','Gm#','Date') %&gt;% mutate(Margin=R-RA) %&gt;% mutate(`W/L`=ifelse(R&gt;RA,\"W\",\"L\")) %&gt;% mutate(Date = mdy(paste(Date, \"2023\")),Month = format(Date, \"%b\")) %&gt;% group_by(Month) %&gt;% summarize(Avg_Margin =mean(Margin,na.rm=TRUE), `W/L`=ifelse(Avg_Margin&gt;0,'W','L'))\n\n\n# Create the ggplot object\np_2023 &lt;- ggplot(record_2023_v1, aes(x = `Gm#`, y = Margin, fill = `W/L`,text = hover_text)) +\n  geom_col(position = \"dodge\") +\n  scale_fill_manual(values = c(\"W\" = \"green\", \"L\" = \"red\")) +\n  xlab('Game Played') + \n  labs(title = \"2023 Season Nationals Game Results\") +\n  theme_minimal()\n\n# Convert to plotly object for interactivity\nplotly_2023 &lt;- ggplotly(p_2023, tooltip = \"text\")  # Ensure tooltips are added\n\n# Print the Plotly object\nplotly_2023\n\n\n\n\nFigure 2: Margin Graph for Washington Nationals Records in 2023. The chart displays the game results, game margins, and opposing teams for each game of the 2023 season. The x-axis represents the games played, and the y-axis shows the results. Data was obtained from https://www.baseball-reference.com/teams/WSN/2023-schedule-scores.shtml.\n\n\nPerformance can result from multiple aspects. One aspect could be the opposing teams getting much stronger. In MLB, each team does not play an equal number of games against all other 29 teams. The Washington Nationals play more games against teams in their division. Therefore, if a team within the same division improved significantly since 2019, it would have a direct and significant impact on the Nationals’ record.\n\n\n\n\n\nCode\n# Load the data\nlibrary(plotly)\nlibrary(tidyverse)\n\n# Load the data\nrecord_2023 &lt;- read_csv(\"../data/2023_record.csv\") \n# https://www.baseball-reference.com/teams/WSN/2023-schedule-scores.shtml\n\n# Load the new data\nstatus_2023 &lt;- read.csv(\"../data/2023_stats.csv\")\n# https://www.baseball-reference.com/leagues/majors/2023-standings.shtml\n\n# Create a list mapping team full name to its abbreviation\nmlb_teams &lt;- data.frame(\n  Full_Name = c(\n    \"Arizona Diamondbacks\", \n    \"Atlanta Braves\", \n    \"Baltimore Orioles\",\n    \"Boston Red Sox\",\n    \"Chicago Cubs\",\n    \"Chicago White Sox\",\n    \"Cincinnati Reds\",\n    \"Cleveland Guardians\",\n    \"Colorado Rockies\",\n    \"Detroit Tigers\",\n    \"Houston Astros\",\n    \"Kansas City Royals\",\n    \"Los Angeles Angels\",\n    \"Los Angeles Dodgers\",\n    \"Miami Marlins\",\n    \"Milwaukee Brewers\",\n    \"Minnesota Twins\",\n    \"New York Mets\",\n    \"New York Yankees\",\n    \"Oakland Athletics\",\n    \"Philadelphia Phillies\",\n    \"Pittsburgh Pirates\",\n    \"San Diego Padres\",\n    \"San Francisco Giants\",\n    \"Seattle Mariners\",\n    \"St. Louis Cardinals\",\n    \"Tampa Bay Rays\",\n    \"Texas Rangers\",\n    \"Toronto Blue Jays\",\n    \"Washington Nationals\"\n  ),\n  Abbreviation = c(\n    \"ARI\", \n    \"ATL\", \n    \"BAL\",\n    \"BOS\",\n    \"CHC\",\n    \"CHW\",\n    \"CIN\",\n    \"CLE\",\n    \"COL\",\n    \"DET\",\n    \"HOU\",\n    \"KCR\",\n    \"LAA\",\n    \"LAD\",\n    \"MIA\",\n    \"MIL\",\n    \"MIN\",\n    \"NYM\",\n    \"NYY\",\n    \"OAK\",\n    \"PHI\",\n    \"PIT\",\n    \"SDP\",\n    \"SFG\",\n    \"SEA\",\n    \"STL\",\n    \"TB\",\n    \"TEX\",\n    \"TOR\",\n    \"WSH\"\n  ),\n  Logo = c(\n    \"https://content.sportslogos.net/logos/54/50/full/arizona_diamondbacks_logo_primary_20123733.png\",\n    \"https://content.sportslogos.net/logos/54/51/full/atlanta_braves_logo_primary_20221869.png\",\n    \"https://content.sportslogos.net/logos/53/52/full/baltimore_orioles_logo_primary_20195398.png\",\n    \"https://content.sportslogos.net/logos/53/53/full/boston_red_sox_logo_primary_20097510.png\",\n    \"https://content.sportslogos.net/logos/54/54/full/chicago_cubs_logo_primary_19792956.png\",\n    \"https://content.sportslogos.net/logos/53/55/full/chicago_white_sox_logo_primary_19911413.png\",\n    \"https://content.sportslogos.net/logos/54/56/full/cincinnati_reds_logo_primary_20133208.png\",\n    \"https://content.sportslogos.net/logos/53/6804/full/cleveland_guardians_logo_primary_2022_sportslogosnet-5538.png\",\n    \"https://content.sportslogos.net/logos/54/58/full/colorado_rockies_logo_primary_20171892.png\",\n    \"https://content.sportslogos.net/logos/53/59/full/detroit_tigers_logo_primary_20162109.png\",\n    \"https://content.sportslogos.net/logos/53/4929/full/houston_astros_logo_primary_20137038.png\",\n    \"https://content.sportslogos.net/logos/53/62/full/kansas_city_royals_logo_primary_20198736.png\",\n    \"https://content.sportslogos.net/logos/53/6521/full/4389_los_angeles_angels-primary-2016.png\",\n    \"https://content.sportslogos.net/logos/54/63/full/los_angeles_dodgers_logo_primary_20127886.png\",\n    \"https://content.sportslogos.net/logos/54/3637/full/miami_marlins_logo_primary_20194007.png\",\n    \"https://content.sportslogos.net/logos/54/64/full/6474_milwaukee_brewers-primary-2020.png\",\n    \"https://content.sportslogos.net/logos/53/65/full/minnesota_twins_logo_primary_20102311.png\",\n    \"https://content.sportslogos.net/logos/54/67/full/m01gfgeorgvbfw15fy04alujm.png\",\n    \"https://content.sportslogos.net/logos/53/68/full/new_york_yankees_logo_primary_19685115.png\",\n    \"https://content.sportslogos.net/logos/53/69/full/6xk2lpc36146pbg2kydf13e50.png\",\n    \"https://content.sportslogos.net/logos/54/70/full/philadelphia_phillies_logo_primary_20193931.png\",\n    \"https://content.sportslogos.net/logos/54/71/full/1250_pittsburgh_pirates-primary-2014.png\",\n    \"https://content.sportslogos.net/logos/54/73/full/7517_san_diego_padres-primary-2020.png\",\n    \"https://content.sportslogos.net/logos/54/74/full/san_francisco_giants_logo_primary_20002208.png\",\n    \"https://content.sportslogos.net/logos/53/75/full/seattle_mariners_logo_primary_19933809.png\",\n    \"https://content.sportslogos.net/logos/54/72/full/3zhma0aeq17tktge1huh7yok5.png\",\n    \"https://content.sportslogos.net/logos/53/2535/full/tampa_bay_rays_logo_primary_20196768.png\",\n    \"https://content.sportslogos.net/logos/53/77/full/ajfeh4oqeealq37er15r3673h.png\",\n    \"https://content.sportslogos.net/logos/53/78/full/toronto_blue_jays_logo_primary_20208446.png\",\n    \"https://content.sportslogos.net/logos/54/578/full/washington_nationals_logo_primary_20117280.png\"\n  )\n)\n\n# Select the W, L and team name\nstatus_2023_v1 &lt;- status_2023 %&gt;% select(Tm,W,L)\n\n# Get the W Loss Margin columns for 2023\nrecord_2023_v2 &lt;- record_2023 %&gt;% select('W/L','R','RA','Opp') %&gt;% mutate(Margin=R-RA) %&gt;% group_by(Opp) %&gt;% summarize(Game_Count_2023 = n(),Margin_avg=mean(Margin))\n\n# Add a rank column to create color bins for better visuals\nrecord_2023_v2 &lt;- record_2023_v2 %&gt;% mutate(Rank = rank(Game_Count_2023, ties.method = \"min\")) %&gt;% mutate\n\n# join the table to get the game played, W, L for each team\nrecord_2023_v3 &lt;- record_2023_v2 %&gt;% left_join(mlb_teams, by = c(\"Opp\" = \"Abbreviation\")) %&gt;% left_join(status_2023_v1, by=c(\"Full_Name\"=\"Tm\"))\n\n# Create custom hover text\n# record_2023_v3$hover_text &lt;- paste(\"Team: \", record_2023_v3$Full_Name, \"&lt;br&gt;Game Count: \", record_2023_v3$Game_Count_2023, '&lt;br&gt;&lt;img src=\"', record_2023_v3$Logo, '\" width=\"50\" height=\"50\" /&gt;', sep = \"\")\nrecord_2023_v3$hover_text &lt;- paste(\"Team: \", record_2023_v3$Full_Name, \"&lt;br&gt;Game Count: \", record_2023_v3$Game_Count_2023,sep = \"\")\n\n\n# Load the data\nrecord_2019 &lt;- read_csv(\"../data/2019_record.csv\") \n# https://www.baseball-reference.com/teams/WSN/2019-schedule-scores.shtml\n\n# Load the new data\nstatus_2019 &lt;- read.csv(\"../data/2019_stats.csv\")\n# https://www.baseball-reference.com/leagues/majors/2019-standings.shtml\n\n# Select the W, L and team name\nstatus_2019_v1 &lt;- status_2019 %&gt;% select(Tm,W,L)\n\n# Get the W Loss Margin columns for 2019\nrecord_2019_v2 &lt;- record_2019 %&gt;% select('W/L','R','RA','Opp') %&gt;% mutate(Margin=R-RA) %&gt;% group_by(Opp) %&gt;% summarize(Game_Count_2019 = n(),Margin_avg=mean(Margin))\n\n# Add a rank column to create color bins for better visuals\nrecord_2019_v2 &lt;- record_2019_v2 %&gt;% mutate(Rank = rank(Game_Count_2019, ties.method = \"min\")) %&gt;% mutate\n\n# join the table to get the game played, W, L for each team\nrecord_2019_v3 &lt;- record_2019_v2 %&gt;% left_join(mlb_teams, by = c(\"Opp\" = \"Abbreviation\")) %&gt;% left_join(status_2019_v1, by=c(\"Full_Name\"=\"Tm\"))\n\n# Create custom hover text\n# record_2019_v3$hover_text &lt;- paste(\"Team: \", record_2019_v3$Full_Name, \"&lt;br&gt;Game Count: \", record_2019_v3$Game_Count_2019, '&lt;br&gt;&lt;img src=\"', record_2019_v3$Logo, '\" width=\"50\" height=\"50\" /&gt;', sep = \"\")\nrecord_2019_v3$hover_text &lt;- paste(\"Team: \", record_2019_v3$Full_Name, \"&lt;br&gt;Game Count: \", record_2019_v3$Game_Count_2019,sep = \"\")\n\n# Create the 2023 plot\nfig &lt;- plot_ly() %&gt;%\n  add_markers(data = record_2023_v3, x = ~W, y = ~Margin_avg,\n              marker = list(size = ~Game_Count_2023*100, sizemode = 'area',\n                            color = ~Rank, colorscale = 'Viridis', alpha = 0.4),\n              mode = 'markers',\n              text = ~Opp,  # Display team names inside the bubbles\n              textfont = list(size = 12),\n              textposition = 'middle center',  # Position the text in the center of the bubbles\n              hoverinfo = 'text',\n              hovertext = ~paste(\"Team:\", Full_Name, \"&lt;br&gt;Game Count: \", Game_Count_2023),\n              name = '2023',\n              visible = T) # Ensure the 2023 data is visible by default\n\n# Add the 2019 data to the same plot\nfig &lt;- fig %&gt;%\n  add_markers(data = record_2019_v3, x = ~W, y = ~Margin_avg,\n              marker = list(size = ~Game_Count_2019*100, sizemode = 'area',\n                            color = ~Rank, colorscale = 'Viridis', alpha = 0.4),\n              mode = 'markers+text',\n              text = ~Opp,  # Display team names inside the bubbles\n              textposition = 'middle center',  # Position the text in the center of the bubbles\n              hoverinfo = 'text',\n              textfont = list(size = 12),\n              hovertext = ~paste(\"Team:\", Full_Name, \"&lt;br&gt;Game Count: \", Game_Count_2019),\n              name = '2019',\n              visible = F) # Start with this trace hidden\n\n# Customize the layout with a toggle button\nfig &lt;- fig %&gt;%\n  layout(\n    title = 'Wins and Margins Plot By Opponent Teams',\n    xaxis = list(title = 'Wins', range = c(45, 110)),\n    yaxis = list(title = 'Avg Margin'),\n    updatemenus = list(\n      list(\n        type = 'buttons',\n        direction = 'left',\n        x = -0.1,\n        xanchor = 'left',\n        y = 1.1,\n        yanchor = 'top',\n        buttons = list(\n          list(method = \"update\",\n               args = list(list(visible = c(TRUE, FALSE)),\n                           list(title = \"Wins and Margins Plot By Opponent Teams in 2023\")),\n               label = \"2023\"),\n          list(method = \"update\",\n               args = list(list(visible = c(FALSE, TRUE)),\n                           list(title = \"Wins and Margins Plot By Opponent Teams in 2019\")),\n               label = \"2019\")\n        )\n      )\n    )\n  )\n\n# Show the plot\nfig\n\n\n\n\nFigure 3: Scatter Bubble Chart for Opponent Team Average Margins and Wins in 2019 and 2023. The x-axis represents the number of games won, and the y-axis represents the average margin per game. The size of each bubble indicates the number of games played against the Washington Nationals, and the color categorizes the games into different clusters. Data was obtained from https://www.baseball-reference.com/leagues/majors/2023-standings.shtml, https://www.baseball-reference.com/leagues/majors/2019-standings.shtml, https://www.baseball-reference.com/teams/WSN/2023-schedule-scores.shtml, and https://www.baseball-reference.com/teams/WSN/2019-schedule-scores.shtml.\n\n\nBy toggling between 2019 and 2023, the games played against different teams changed slightly, but the Washington Nationals still played the most games against the following four teams: Miami Marlins, Philadelphia Phillies, Atlanta Braves, and New York Mets. Comparing the records for those four teams, the games they won in 2019 and 2023 remained quite consistent, but the winning margins were much smaller in 2023. This indicates a slightly worse performance for the four teams the Nationals played the most. It indirectly suggests that the Nationals’ poorer record in 2023 is not directly due to their opponents’ strength, but more likely due to their own diminished capabilities. Now, let’s dig into more statistics from the team’s operational management level.\n\n\n\n\n\nCode\n# Load the data\nlibrary(plotly)\nlibrary(tidyverse)\n# Source: https://legacy.baseballprospectus.com/compensation/?team=WAS\nsalary_2019 &lt;- read_csv(\"../data/Salary_2019.csv\")\n# Source: https://www.spotrac.com/mlb/washington-nationals/payroll/2023/\nsalary_2023 &lt;- read_csv(\"../data/Salary_2023.csv\")\n\n# Looking at position and salary column\nsalary_2019 &lt;- salary_2019 %&gt;% dplyr::select(\"Pos\",\"Salary\") %&gt;% na.omit()\nsalary_2023 &lt;- salary_2023 %&gt;% dplyr::select(\"POS.\",\"BASE SALARY\") %&gt;% na.omit()\n\n# check positions in each dataset\n# unique(salary_2019$Pos)\n# unique(salary_2023$`POS.`)\n\n# replace the 2023 \"RP/CL\" to \"RP\", change the dollar format into value format\nsalary_2023 &lt;- salary_2023 %&gt;% mutate(Pos = ifelse(`POS.`!=\"RP/CL\",`POS.`,\"RP\")) %&gt;% mutate(Salary_2023=as.numeric(gsub(\"\\\\$\", \"\", gsub(\",\", \"\", `BASE SALARY`))))  %&gt;% dplyr::select(Pos, Salary_2023)\n\n# change the 2019 data dollar format into value format\nsalary_2019 &lt;- salary_2019 %&gt;% mutate(Salary_2019=as.numeric(gsub(\"\\\\$\", \"\", gsub(\",\", \"\", Salary))))\n\n# Group by position\nsalary_2023_1 &lt;- salary_2023 %&gt;% group_by(Pos) %&gt;% summarize(salary_sum_2023=sum(as.numeric(Salary_2023)))\n# calculate total\nsalary_2023_1$total_2023 &lt;- sum(salary_2023_1$salary_sum_2023)\n# calculate percentage\nsalary_2023_1$percentage_2023 &lt;- salary_2023_1$salary_sum_2023/salary_2023_1$total_2023\n\n# Group by position\nsalary_2019_1 &lt;- salary_2019 %&gt;% group_by(Pos) %&gt;% summarize(salary_sum_2019=sum(as.numeric(Salary_2019)))\n# calculate total\nsalary_2019_1$total_2019 &lt;- sum(salary_2019_1$salary_sum_2019)\n# calculate percentage\nsalary_2019_1$percentage_2019 &lt;- salary_2019_1$salary_sum_2019/salary_2019_1$total_2019\n\n# Choose the top 4 and combine the rest\ntop_four_2019 &lt;- salary_2019_1 %&gt;% arrange(desc(percentage_2019)) %&gt;% slice(1:4)\nothers_2019 &lt;- salary_2019_1 %&gt;% arrange(desc(percentage_2019)) %&gt;% slice(5:n()) %&gt;% summarise(Pos = 'Others',salary_sum_2019 = sum(salary_sum_2019),total_2019 = first(total_2019), percentage_2019 = sum(percentage_2019))\nsalary_2019_final &lt;- rbind(top_four_2019,others_2019)\n# Rename the positions\nsalary_2019_final &lt;- salary_2019_final %&gt;% mutate(Pos= case_when(\n  Pos == \"SP\" ~ \"Starting Pitcher\",\n  Pos == \"1B\"~ \"First Baseman\",\n  Pos == \"3B\"~ \"Third Baseman\",\n  Pos == \"RP\"~ \"Relief Pitcher\",\n  TRUE ~ \"Others\"))\n\n# Get the total salary for 2019\nsalary_total_2019 &lt;- mean(salary_2019_final$total_2019,na.rm=TRUE)\n\n# Choose the top 4 and combine the rest\ntop_four_2023 &lt;- salary_2023_1 %&gt;% arrange(desc(percentage_2023)) %&gt;% slice(1:4)\nothers_2023 &lt;- salary_2023_1 %&gt;% arrange(desc(percentage_2023)) %&gt;% slice(5:n()) %&gt;% summarise(Pos = 'Others',salary_sum_2023 = sum(salary_sum_2023),total_2023 = first(total_2023), percentage_2023 = sum(percentage_2023))\nsalary_2023_final &lt;- rbind(top_four_2023,others_2023)\n# Rename the positions\nsalary_2023_final &lt;- salary_2023_final %&gt;% mutate(Pos= case_when(\n  Pos == \"SP\" ~ \"Starting Pitcher\",\n  Pos == \"1B\"~ \"First Baseman\",\n  Pos == \"2B\"~ \"Second Baseman\",\n  Pos == \"RP\"~ \"Relief Pitcher\",\n  TRUE ~ \"Others\"))\n\n# Get the total salary for 2023\nsalary_total_2023 &lt;- mean(salary_2023_final$total_2023,na.rm=TRUE)\n\n\n# Create pie chart for the first dataset\npie1 &lt;- plot_ly(salary_2019_final, labels = ~Pos, values = ~salary_sum_2019, type = 'pie',\n                textinfo = 'percent',\n                text = ~paste(\"2019 Total Payroll:\", format(salary_total_2019, big.mark = \",\", scientific = FALSE), \"&lt;br&gt;Position:\", salary_2019_final$Pos, \"&lt;br&gt;Salary:\",format(salary_2019_final$salary_sum_2019, big.mark = \",\", scientific = FALSE)),\n                hoverinfo = 'text',\n                textposition = 'inside',     # Position the text inside the slices\n                marker = list(\n                  colors = c('#0072B2','#F0E442', '#D55E00', '#CC79A7', '#009E73'), # Assign new colors\n                  line = list(color = '#FFFFFF', width = 2)  # Set slice borders\n                ),\n                domain = list(x = c(0, 0.6), y = c(0, 1)),\n                name = \"2019 Payroll\") %&gt;% \n  layout(title = \"2019 Payroll Allocations\", showlegend = TRUE)\n\n# Create pie chart for the second dataset\npie2 &lt;- plot_ly(salary_2023_final, labels = ~Pos, values = ~salary_sum_2023, type = 'pie',\n                textinfo = 'percent',\n                text = ~paste(\"2023 Total Payroll:\", format(salary_total_2023, big.mark = \",\", scientific = FALSE), \"&lt;br&gt;Position:\", salary_2023_final$Pos, \"&lt;br&gt;Salary:\",format(salary_2023_final$salary_sum_2023, big.mark = \",\", scientific = FALSE)),\n                hoverinfo = 'text',\n                textposition = 'inside',     # Position the text inside the slices\n                marker = list(\n                  colors = c('#0072B2','#F0E442', '#FF0000', '#CC79A7', '#009E73'), # Assign new colors\n                  line = list(color = '#FFFFFF', width = 2)  # Set slice borders\n                ),\n                domain = list(x = c(0.6, 1), y = c(0, 0.5)),\n                name = \"2023 Payroll\") %&gt;% \n  layout(title = \"2023 Payroll Allocations\", showlegend = TRUE)\n\n# Combine the pie charts side by side\nsubplot(pie1, pie2, nrows = 1, shareX = TRUE, shareY = TRUE, titleX = TRUE) %&gt;%\n  layout(title = \"Payroll Pie Charts, 2019(Left) Versus 2023(Right)\")\n\n\n\n\nFigure 4: Pie Chart for Washington Nationals Payroll by Positions in 2019 and 2023. The two charts show the total payroll by the top 5 positions. The top 4 positions were kept, while the remaining are grouped into the ‘Others’ category. The size of the pie chart is proportional to the payroll size in 2019 and 2023, respectively. The 2019 data is obtained from https://legacy.baseballprospectus.com/compensation/?team=WAS, and the 2023 data is obtained from https://www.spotrac.com/mlb/washington-nationals/payroll/2023/.\n\n\n\n\nCode\n# Load the data\nlibrary(plotly)\nlibrary(tidyverse)\n# Source: https://legacy.baseballprospectus.com/compensation/?team=WAS\nsalary_2019 &lt;- read_csv(\"../data/Salary_2019.csv\")\n# Source: https://www.spotrac.com/mlb/washington-nationals/payroll/2023/\nsalary_2023 &lt;- read_csv(\"../data/Salary_2023.csv\")\n\n# Looking at position and salary column\nsalary_2019 &lt;- salary_2019 %&gt;% dplyr::select(\"Pos\",\"Salary\") %&gt;% na.omit()\nsalary_2023 &lt;- salary_2023 %&gt;% dplyr::select(\"POS.\",\"BASE SALARY\") %&gt;% na.omit()\n\n# check positions in each dataset\n# unique(salary_2019$Pos)\n# unique(salary_2023$`POS.`)\n\n# replace the 2023 \"RP/CL\" to \"RP\", change the dollar format into value format\nsalary_2023 &lt;- salary_2023 %&gt;% mutate(Pos = ifelse(`POS.`!=\"RP/CL\",`POS.`,\"RP\")) %&gt;% mutate(Salary_2023=as.numeric(gsub(\"\\\\$\", \"\", gsub(\",\", \"\", `BASE SALARY`))))  %&gt;% dplyr::select(Pos, Salary_2023)\n\n# change the 2019 data dollar format into value format\nsalary_2019 &lt;- salary_2019 %&gt;% mutate(Salary_2019=as.numeric(gsub(\"\\\\$\", \"\", gsub(\",\", \"\", Salary))))\n\n# Group by position\nsalary_2023_1 &lt;- salary_2023 %&gt;% group_by(Pos) %&gt;% summarize(salary_sum_2023=sum(as.numeric(Salary_2023)))\n# calculate total\nsalary_2023_1$total_2023 &lt;- sum(salary_2023_1$salary_sum_2023)\n# calculate percentage\nsalary_2023_1$percentage_2023 &lt;- salary_2023_1$salary_sum_2023/salary_2023_1$total_2023\n\n# Group by position\nsalary_2019_1 &lt;- salary_2019 %&gt;% group_by(Pos) %&gt;% summarize(salary_sum_2019=sum(as.numeric(Salary_2019)))\n# calculate total\nsalary_2019_1$total_2019 &lt;- sum(salary_2019_1$salary_sum_2019)\n# calculate percentage\nsalary_2019_1$percentage_2019 &lt;- salary_2019_1$salary_sum_2019/salary_2019_1$total_2019\n\n# Choose the top 4 and combine the rest\ntop_four_2019 &lt;- salary_2019_1 %&gt;% arrange(desc(percentage_2019)) %&gt;% slice(1:4)\nothers_2019 &lt;- salary_2019_1 %&gt;% arrange(desc(percentage_2019)) %&gt;% slice(5:n()) %&gt;% summarise(Pos = 'Others',salary_sum_2019 = sum(salary_sum_2019),total_2019 = first(total_2019), percentage_2019 = sum(percentage_2019))\nsalary_2019_final &lt;- rbind(top_four_2019,others_2019)\n# Rename the positions\nsalary_2019_final &lt;- salary_2019_final %&gt;% mutate(Pos= case_when(\n  Pos == \"SP\" ~ \"Starting Pitcher\",\n  Pos == \"1B\"~ \"First Baseman\",\n  Pos == \"3B\"~ \"Other Baseman\",\n  Pos == \"RP\"~ \"Relief Pitcher\",\n  TRUE ~ \"Others\"))\n\n# Get the total salary for 2019\nsalary_total_2019 &lt;- mean(salary_2019_final$total_2019,na.rm=TRUE)\n\n# Choose the top 4 and combine the rest\ntop_four_2023 &lt;- salary_2023_1 %&gt;% arrange(desc(percentage_2023)) %&gt;% slice(1:4)\nothers_2023 &lt;- salary_2023_1 %&gt;% arrange(desc(percentage_2023)) %&gt;% slice(5:n()) %&gt;% summarise(Pos = 'Others',salary_sum_2023 = sum(salary_sum_2023),total_2023 = first(total_2023), percentage_2023 = sum(percentage_2023))\nsalary_2023_final &lt;- rbind(top_four_2023,others_2023)\n# Rename the positions\nsalary_2023_final &lt;- salary_2023_final %&gt;% mutate(Pos= case_when(\n  Pos == \"SP\" ~ \"Starting Pitcher\",\n  Pos == \"1B\"~ \"First Baseman\",\n  Pos == \"2B\"~ \"Other Baseman\",\n  Pos == \"RP\"~ \"Relief Pitcher\",\n  TRUE ~ \"Others\"))\n\n# Get the total salary for 2023\nsalary_total_2023 &lt;- mean(salary_2023_final$total_2023,na.rm=TRUE)\n\nsalary_combined &lt;- salary_2019_final %&gt;% left_join(salary_2023_final,by='Pos') %&gt;% mutate(change_percent = (percentage_2023-percentage_2019)) %&gt;% mutate(change_dollar = salary_sum_2023- salary_sum_2019) %&gt;% mutate(percentage_shift =change_dollar/salary_sum_2019) %&gt;% dplyr::select(\"Pos\",\"change_percent\",\"change_dollar\",\"percentage_shift\")\n\n# Create separate hover texts for each metric\nhover_text_dollars &lt;- with(salary_combined, paste(\n  \"Position: \", Pos, \"&lt;br&gt;\",\n  \"Change in Dollars: $\", format(change_dollar, big.mark = \",\")\n))\n\nhover_text_percent &lt;- with(salary_combined, paste(\n  \"Position: \", Pos, \"&lt;br&gt;\",\n  \"Change Percent: \", format(change_percent * 100, digits = 2, nsmall = 2), \"%\"\n))\n\nhover_text_shift &lt;- with(salary_combined, paste(\n  \"Position: \", Pos, \"&lt;br&gt;\",\n  \"Percentage Shift: \", format(percentage_shift * 100, digits = 2, nsmall = 2), \"%\"\n))\n\n# Create the initial plot with the default display set to 'change_dollar'\np &lt;- plot_ly(\n  data = salary_combined, \n  x = ~Pos, \n  y = ~change_dollar, \n  type = 'bar', \n  name = 'Change in Dollars',\n  text = ~hover_text_dollars, # Assign initial hover text\n  hoverinfo = \"text\", # Specify that hoverinfo should show text\n  marker = list(color = 'rgb(49,130,189)'),\n  textposition = 'none'\n)\n\n# Adding the update menu for toggling\np &lt;- p %&gt;% layout(\n  title = \"Washington Nationals Payroll Changes from 2019 to 2023\",\n  xaxis = list(title = \"Position\"),\n  yaxis = list(title = \"Change in Dollars\"), # Initial y-axis title\n  updatemenus = list(\n    list(\n      type = \"buttons\",\n      direction = \"left\",\n      x = 0,\n      xanchor = \"left\",\n      y = -0.1,\n      yanchor = \"top\",\n      buttons = list(\n        list(\n          method = \"update\",\n          args = list(list(\"y\" = list(salary_combined$change_dollar), \"text\" = list(hover_text_dollars)), \n                      list(\"yaxis.title\" = \"Change in Dollars\")),\n          label = \"Change in Dollars\"\n        ),\n        list(\n          method = \"update\",\n          args = list(list(\"y\" = list(salary_combined$change_percent), \"text\" = list(hover_text_percent)),\n                      list(\"yaxis.title\" = \"Change in Proportion\")),\n          label = \"Change in Proportion\"\n        ),\n        list(\n          method = \"update\",\n          args = list(list(\"y\" = list(salary_combined$percentage_shift), \"text\" = list(hover_text_shift)),\n                      list(\"yaxis.title\" = \"Proportion Shift Based on 2019 Payroll\")),\n          label = \"Proportion Shift Based on 2019 Dollars\"\n        )\n      )\n    )\n  )\n)\n\n# Print the plot\np\n\n\n\n\nFigure 5: Bar Chart for Washington Nationals Payroll Changes by Positions between 2019 and 2023. This bar chart complements the pie chart by displaying three statistics. The first is the dollar value change for each position from 2019 to 2023. The second shows the proportion of that position’s salary change. The third statistic represents the dollar value change divided by the total 2019 salary for that position to provide a more detailed percentage shift. The 2019 data is obtained from https://legacy.baseballprospectus.com/compensation/?team=WAS, and the 2023 data is obtained from https://www.spotrac.com/mlb/washington-nationals/payroll/2023/.\n\n\nThe pie chart displays the total payroll by positions for the years 2019 and 2023. Accompanying this, a bar chart serves as a supplement, showing the dollar or percentage change from 2019 to 2023. There are two significant findings related to the payroll statistics. In 2019, the Washington Nationals spent almost twice the amount of money that they did in 2023. All positions show a decrease in dollar values according to the bar chart. This raises significant questions: What caused the large decrease in total payroll from 2019 to 2023? What occurred at the team operational level? On the other hand, proportionally, the Nationals allocated much more money to pitchers in 2023, attempting to invest the same amount of money to sign star pitchers. According to the proportion shift graph, the baseman positions experienced the largest decrease in dollar value change divided by the 2019 payroll, indicating that in 2023, these positions were not prioritized in the team-building process. This is a significant issue since, ideally, teams need to distribute their spending evenly across different positions to achieve a more balanced team. Although an outstanding pitcher is key to a competitive team, fans might also want to see star batters who can produce more home runs. In general, people prefer offense over defense.\n\n\n\n\n\nCode\nlibrary(tidyverse)\n# Load the data\nstadium &lt;- read_csv(\"../data/Nationals_Stadium_Stats.csv\")\n# https://www.baseball-reference.com/teams/WSN/attend.shtml\n\n# Drop year 2020 due to the Covid impact\nstadium &lt;- stadium %&gt;% filter (Year!=2020 & Year!=2024)\n\n# Convert 'Est. Payroll' to numeric after removing commas and dollar signs\nstadium$`Est. Payroll` &lt;- as.numeric(gsub(\"[,$]\", \"\", stadium$`Est. Payroll`))\n\nlibrary(readxl)\n# read the revenue related file\n# Get the names of all sheets in the Excel file\nsheets1 &lt;- excel_sheets(\"../data/statistic_id203506_washington-nationals-average-ticket-price-2006-2023.xlsx\")\n\n# Read the second tab (assuming its name is stored in the variable 'sheet_name')\nticket &lt;- read_excel(\"../data/statistic_id203506_washington-nationals-average-ticket-price-2006-2023.xlsx\", sheet = sheets1[2])\n\n# Drop the unused rows\nticket &lt;- ticket %&gt;% na.omit()\n\n# Replace column names\nnames(ticket) &lt;- c('Year','Ticket Price')\n\n# Remove year 2020 due to Covid impact and the additional years outside 2008 to 2023 to match the time scale\nticket &lt;- ticket %&gt;% filter (Year!=2020 & Year &gt;= 2008 ) %&gt;% mutate(Year = as.numeric(Year))\n\n# Join the ticket price column to the stadium dataset\nstadium_combined &lt;- stadium %&gt;% left_join(ticket,by='Year')\n\n# read the revenue related file\n# Get the names of all sheets in the Excel file\nsheets2 &lt;- excel_sheets(\"../data/statistic_id196692_washington-nationals-revenue-2001-2022.xlsx\")\n\n# Read the second tab (assuming its name is stored in the variable 'sheet_name')\nrevenue &lt;- read_excel(\"../data/statistic_id196692_washington-nationals-revenue-2001-2022.xlsx\", sheet = sheets2[2])\n\n# Drop the unused rows\nrevenue &lt;- revenue %&gt;% na.omit()\n\n# Replace column names\nnames(revenue) &lt;- c('Year','Revenue')\n\n# Remove year 2020 due to Covid impact and the additional years outside 2008 to 2023 to match the time scale\nrevenue &lt;- revenue %&gt;% filter (Year!=2020 & Year &gt;= 2008 ) %&gt;% mutate(Year = as.numeric(Year))\n\n# Join the revenue column to the stadium dataset\nstadium_final &lt;- stadium_combined %&gt;% left_join(revenue,by='Year')\n\nlibrary(plotly)\n# Create a base plot with hover text\np &lt;- plot_ly(stadium_final, x = ~Year, y = ~Attendance, type = 'scatter', mode = 'lines+markers', name = 'Attendance',\n             text = ~paste(\"Year:\", Year, \"&lt;br&gt;Attendance:\", format(Attendance, big.mark = \",\", scientific = FALSE)), hoverinfo = 'text')\n\n# Add other traces with their respective hover text\np &lt;- p %&gt;% add_trace(y = ~`Est. Payroll`, name = \"Estimated Payroll\", visible = F,\n                     text = ~paste(\"Year:\", Year, \"&lt;br&gt;Payroll:\", format(`Est. Payroll`, big.mark = \",\", scientific = FALSE)), hoverinfo = 'text')\np &lt;- p %&gt;% add_trace(y = ~`Ticket Price`, name = \"Average Ticket Price\", visible = F,\n                     text = ~paste(\"Year:\", Year, \"&lt;br&gt;Price:\", `Ticket Price`, \"$\"), hoverinfo = 'text')\np &lt;- p %&gt;% add_trace(y = ~Revenue, name = \"Revenue\", visible = F,\n                     text = ~paste(\"Year:\", Year, \"&lt;br&gt;Revenune in Millions:\", Revenue), hoverinfo = 'text')\np &lt;- p %&gt;% add_trace(y = ~PPF, name = \"Pitcher's Park Factor\", visible = F,\n                     text = ~paste(\"Year:\", Year, \"&lt;br&gt;Factor Value:\", PPF), hoverinfo = 'text')\np &lt;- p %&gt;% add_trace(y = ~BPF, name = \"Batter's Park Factor\", visible = F,\n                     text = ~paste(\"Year:\", Year, \"&lt;br&gt;Factor Value:\", BPF), hoverinfo = 'text')\n\n# Define layout and buttons for interactivity\nfinal_plot &lt;- p %&gt;% layout(\n  title = 'Interactive Visualization of Washington Nationals Statistics',\n  xaxis = list(title = 'Year'),\n  yaxis = list(title = 'Value'),\n  updatemenus = list(\n    list(\n      type = 'buttons',\n      direction = 'left',\n      x = 0,\n      xanchor = 'left',\n      y = -0.2,\n      yanchor = 'top',\n      buttons = list(\n        list(method = 'update', args = list(list(visible = c(TRUE, FALSE, FALSE, FALSE, FALSE, FALSE)), list(title = 'Attendance')), label = 'Attendance'),\n        list(method = 'update', args = list(list(visible = c(FALSE, TRUE, FALSE, FALSE, FALSE, FALSE)), list(title = 'Estimated Payroll')), label = 'Payroll'),\n        list(method = 'update', args = list(list(visible = c(FALSE, FALSE, TRUE, FALSE, FALSE, FALSE)), list(title = 'Average Ticket Price')), label = 'Ticket Price'),\n        list(method = 'update', args = list(list(visible = c(FALSE, FALSE, FALSE, TRUE, FALSE, FALSE)), list(title = 'Revenue')), label = 'Revenue'),\n        list(method = 'update', args = list(list(visible = c(FALSE, FALSE, FALSE, FALSE, TRUE, FALSE)), list(title = 'Pitcher\\'s Park Factor')), label = 'PPF'),\n        list(method = 'update', args = list(list(visible = c(FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), list(title = 'Batter\\'s Park Factor')), label = 'BPF')\n      )\n    )\n  )\n)\n\n# Show the plot\nfinal_plot\n\n\n\n\nFigure 6: Line Chart for Washington Nationals Stadium, Revenue, and Payroll related statistics from 2008 to 2023. The chart contains six aspects: ‘Attendance’, ‘Estimated Payroll’, ‘Average Ticket Price’, ‘Revenue (millions)’, ‘Pitcher’s Park Factor’, and ‘Batter’s Park Factor’. Different aspects can be selected individually. Year 2020 is omitted due to the Covid impact of a short season. For Pitcher’s Park Factor (PPF), a number greater than 100 suggests that the park is harder on pitchers, more hitter-friendly. And for Batter’s Park Factor (BPF), a number greater than 100 suggests that the park is favorable for hitters, boosting offensive statistics. The ticket price data is obtained from https://www.statista.com/statistics/203506/washington-nationals-average-ticket-price/. The revenue data is obtained from https://www.statista.com/statistics/196692/revenue-of-the-washington-nationals-since-2006/. The other data is obtained from the source https://www.baseball-reference.com/teams/WSN/attend.shtml.\n\n\nThe last chart from the team operational perspective, representing trends from 2008 to 2023 at a team operational level, is a line chart that illustrates different aspects. Attendance and payroll both dropped significantly since 2019. However, interestingly, revenue has remained steady. This suggests that the Nationals’ management team has intentionally reduced spending on the team. While this could be part of a strategic plan, it may harm fan loyalty. The decrease in attendance has impacted the two park factors, which both dropped below 100. The Nationals need to initiate some marketing campaigns to attract more fan attendance, which could have a long-term impact on the team’s performance. In the next section, more statistics related to team offense and defense will be reviewed to see if any detailed strategies related to team building could be proposed.",
    "crumbs": [
      "Project Summary"
    ]
  },
  {
    "objectID": "project_summary.html#nationals-team-level-statistics",
    "href": "project_summary.html#nationals-team-level-statistics",
    "title": "Bring the Washington Nationals Back to MLB Championship Contention",
    "section": "",
    "text": "First, let’s get an overview of the season records for the Washington Nationals in 2019 and 2023. By comparing the 2019 and 2023 Washington Nationals season records side-by-side, it is evident that the 2023 season generally performed much worse than 2019. It featured more blowout losses and fewer wins with margins greater than 5. There was no specific seasonal pattern for 2023. For example, some teams might start to have a poor record after a mid-season trade or a significant injury, but none of these factors were apparent for the 2023 season. In contrast, during the 2019 season, the team improved and developed better chemistry after about one-third of the season, around 50 games. Overall, the 2023 team performed significantly worse than the 2019 team throughout the season.\n\n\nCode\n# Load the data\nlibrary(plotly)\nlibrary(tidyverse)\nrecord_2019 &lt;- read_csv(\"../data/2019_record.csv\") \n# https://www.baseball-reference.com/teams/WSN/2019-schedule-scores.shtml\n\n# Create the margin graphs by selecting the columns and calculating margins as R-RA\nrecord_2019_v1 &lt;- record_2019 %&gt;% select('W/L','R','RA','Gm#','Opp') %&gt;% mutate(Margin=R-RA) %&gt;% mutate(`W/L`=ifelse(R&gt;RA,\"W\",\"L\"))\nrecord_2019_v1 &lt;- record_2019_v1 %&gt;% mutate(hover_text = paste(\"Opponent Team:\", Opp, \"&lt;br&gt;Margin:\", Margin,\"&lt;br&gt;Result:\",`W/L`))  # Add a hover text column\n\n# Create the ggplot object\np_2019 &lt;- ggplot(record_2019_v1, aes(x = `Gm#`, y = Margin, fill = `W/L`,text = hover_text)) +\n  geom_col(position = \"dodge\") +\n  scale_fill_manual(values = c(\"W\" = \"green\", \"L\" = \"red\")) +\n  xlab('Game Played') + \n  labs(title = \"2019 Season Nationals Game Results\") +\n  theme_minimal()\n\n# Convert to plotly object for interactivity\nplotly_2019 &lt;- ggplotly(p_2019, tooltip = \"text\")  # Ensure tooltips are added\n\n# Print the Plotly object\nplotly_2019\n\n\n\n\nFigure 1: Margin Graph for Washington Nationals Records in 2019. The chart displays the game results, game margins, and opposing teams for each game of the 2019 season. The x-axis represents the games played, and the y-axis shows the results. Data was obtained from https://www.baseball-reference.com/teams/WSN/2019-schedule-scores.shtml.\n\n\n\n\nCode\n# Load the data\nlibrary(plotly)\nlibrary(tidyverse)\nrecord_2023 &lt;- read_csv(\"../data/2023_record.csv\")\n# https://www.baseball-reference.com/teams/WSN/2023-schedule-scores.shtml\n\n# Create the margin graphs by selecting the columns and calculating margins as R-RA\n# Calculate average margin by month\nrecord_2023_v1 &lt;- record_2023 %&gt;% select('W/L','R','RA','Gm#','Date','Opp') %&gt;% mutate(Margin=R-RA) %&gt;% mutate(`W/L`=ifelse(R&gt;RA,\"W\",\"L\")) %&gt;% mutate(hover_text = paste(\"Opponent Team:\", Opp, \"&lt;br&gt;Margin:\", Margin,\"&lt;br&gt;Result:\",`W/L`))  # Add a hover text column\n\n# record_2023_v1 &lt;- record_2023 %&gt;% select('W/L','R','RA','Gm#','Date') %&gt;% mutate(Margin=R-RA) %&gt;% mutate(`W/L`=ifelse(R&gt;RA,\"W\",\"L\")) %&gt;% mutate(Date = mdy(paste(Date, \"2023\")),Month = format(Date, \"%b\")) %&gt;% group_by(Month) %&gt;% summarize(Avg_Margin =mean(Margin,na.rm=TRUE), `W/L`=ifelse(Avg_Margin&gt;0,'W','L'))\n\n\n# Create the ggplot object\np_2023 &lt;- ggplot(record_2023_v1, aes(x = `Gm#`, y = Margin, fill = `W/L`,text = hover_text)) +\n  geom_col(position = \"dodge\") +\n  scale_fill_manual(values = c(\"W\" = \"green\", \"L\" = \"red\")) +\n  xlab('Game Played') + \n  labs(title = \"2023 Season Nationals Game Results\") +\n  theme_minimal()\n\n# Convert to plotly object for interactivity\nplotly_2023 &lt;- ggplotly(p_2023, tooltip = \"text\")  # Ensure tooltips are added\n\n# Print the Plotly object\nplotly_2023\n\n\n\n\nFigure 2: Margin Graph for Washington Nationals Records in 2023. The chart displays the game results, game margins, and opposing teams for each game of the 2023 season. The x-axis represents the games played, and the y-axis shows the results. Data was obtained from https://www.baseball-reference.com/teams/WSN/2023-schedule-scores.shtml.\n\n\nPerformance can result from multiple aspects. One aspect could be the opposing teams getting much stronger. In MLB, each team does not play an equal number of games against all other 29 teams. The Washington Nationals play more games against teams in their division. Therefore, if a team within the same division improved significantly since 2019, it would have a direct and significant impact on the Nationals’ record.\n\n\n\n\n\nCode\n# Load the data\nlibrary(plotly)\nlibrary(tidyverse)\n\n# Load the data\nrecord_2023 &lt;- read_csv(\"../data/2023_record.csv\") \n# https://www.baseball-reference.com/teams/WSN/2023-schedule-scores.shtml\n\n# Load the new data\nstatus_2023 &lt;- read.csv(\"../data/2023_stats.csv\")\n# https://www.baseball-reference.com/leagues/majors/2023-standings.shtml\n\n# Create a list mapping team full name to its abbreviation\nmlb_teams &lt;- data.frame(\n  Full_Name = c(\n    \"Arizona Diamondbacks\", \n    \"Atlanta Braves\", \n    \"Baltimore Orioles\",\n    \"Boston Red Sox\",\n    \"Chicago Cubs\",\n    \"Chicago White Sox\",\n    \"Cincinnati Reds\",\n    \"Cleveland Guardians\",\n    \"Colorado Rockies\",\n    \"Detroit Tigers\",\n    \"Houston Astros\",\n    \"Kansas City Royals\",\n    \"Los Angeles Angels\",\n    \"Los Angeles Dodgers\",\n    \"Miami Marlins\",\n    \"Milwaukee Brewers\",\n    \"Minnesota Twins\",\n    \"New York Mets\",\n    \"New York Yankees\",\n    \"Oakland Athletics\",\n    \"Philadelphia Phillies\",\n    \"Pittsburgh Pirates\",\n    \"San Diego Padres\",\n    \"San Francisco Giants\",\n    \"Seattle Mariners\",\n    \"St. Louis Cardinals\",\n    \"Tampa Bay Rays\",\n    \"Texas Rangers\",\n    \"Toronto Blue Jays\",\n    \"Washington Nationals\"\n  ),\n  Abbreviation = c(\n    \"ARI\", \n    \"ATL\", \n    \"BAL\",\n    \"BOS\",\n    \"CHC\",\n    \"CHW\",\n    \"CIN\",\n    \"CLE\",\n    \"COL\",\n    \"DET\",\n    \"HOU\",\n    \"KCR\",\n    \"LAA\",\n    \"LAD\",\n    \"MIA\",\n    \"MIL\",\n    \"MIN\",\n    \"NYM\",\n    \"NYY\",\n    \"OAK\",\n    \"PHI\",\n    \"PIT\",\n    \"SDP\",\n    \"SFG\",\n    \"SEA\",\n    \"STL\",\n    \"TB\",\n    \"TEX\",\n    \"TOR\",\n    \"WSH\"\n  ),\n  Logo = c(\n    \"https://content.sportslogos.net/logos/54/50/full/arizona_diamondbacks_logo_primary_20123733.png\",\n    \"https://content.sportslogos.net/logos/54/51/full/atlanta_braves_logo_primary_20221869.png\",\n    \"https://content.sportslogos.net/logos/53/52/full/baltimore_orioles_logo_primary_20195398.png\",\n    \"https://content.sportslogos.net/logos/53/53/full/boston_red_sox_logo_primary_20097510.png\",\n    \"https://content.sportslogos.net/logos/54/54/full/chicago_cubs_logo_primary_19792956.png\",\n    \"https://content.sportslogos.net/logos/53/55/full/chicago_white_sox_logo_primary_19911413.png\",\n    \"https://content.sportslogos.net/logos/54/56/full/cincinnati_reds_logo_primary_20133208.png\",\n    \"https://content.sportslogos.net/logos/53/6804/full/cleveland_guardians_logo_primary_2022_sportslogosnet-5538.png\",\n    \"https://content.sportslogos.net/logos/54/58/full/colorado_rockies_logo_primary_20171892.png\",\n    \"https://content.sportslogos.net/logos/53/59/full/detroit_tigers_logo_primary_20162109.png\",\n    \"https://content.sportslogos.net/logos/53/4929/full/houston_astros_logo_primary_20137038.png\",\n    \"https://content.sportslogos.net/logos/53/62/full/kansas_city_royals_logo_primary_20198736.png\",\n    \"https://content.sportslogos.net/logos/53/6521/full/4389_los_angeles_angels-primary-2016.png\",\n    \"https://content.sportslogos.net/logos/54/63/full/los_angeles_dodgers_logo_primary_20127886.png\",\n    \"https://content.sportslogos.net/logos/54/3637/full/miami_marlins_logo_primary_20194007.png\",\n    \"https://content.sportslogos.net/logos/54/64/full/6474_milwaukee_brewers-primary-2020.png\",\n    \"https://content.sportslogos.net/logos/53/65/full/minnesota_twins_logo_primary_20102311.png\",\n    \"https://content.sportslogos.net/logos/54/67/full/m01gfgeorgvbfw15fy04alujm.png\",\n    \"https://content.sportslogos.net/logos/53/68/full/new_york_yankees_logo_primary_19685115.png\",\n    \"https://content.sportslogos.net/logos/53/69/full/6xk2lpc36146pbg2kydf13e50.png\",\n    \"https://content.sportslogos.net/logos/54/70/full/philadelphia_phillies_logo_primary_20193931.png\",\n    \"https://content.sportslogos.net/logos/54/71/full/1250_pittsburgh_pirates-primary-2014.png\",\n    \"https://content.sportslogos.net/logos/54/73/full/7517_san_diego_padres-primary-2020.png\",\n    \"https://content.sportslogos.net/logos/54/74/full/san_francisco_giants_logo_primary_20002208.png\",\n    \"https://content.sportslogos.net/logos/53/75/full/seattle_mariners_logo_primary_19933809.png\",\n    \"https://content.sportslogos.net/logos/54/72/full/3zhma0aeq17tktge1huh7yok5.png\",\n    \"https://content.sportslogos.net/logos/53/2535/full/tampa_bay_rays_logo_primary_20196768.png\",\n    \"https://content.sportslogos.net/logos/53/77/full/ajfeh4oqeealq37er15r3673h.png\",\n    \"https://content.sportslogos.net/logos/53/78/full/toronto_blue_jays_logo_primary_20208446.png\",\n    \"https://content.sportslogos.net/logos/54/578/full/washington_nationals_logo_primary_20117280.png\"\n  )\n)\n\n# Select the W, L and team name\nstatus_2023_v1 &lt;- status_2023 %&gt;% select(Tm,W,L)\n\n# Get the W Loss Margin columns for 2023\nrecord_2023_v2 &lt;- record_2023 %&gt;% select('W/L','R','RA','Opp') %&gt;% mutate(Margin=R-RA) %&gt;% group_by(Opp) %&gt;% summarize(Game_Count_2023 = n(),Margin_avg=mean(Margin))\n\n# Add a rank column to create color bins for better visuals\nrecord_2023_v2 &lt;- record_2023_v2 %&gt;% mutate(Rank = rank(Game_Count_2023, ties.method = \"min\")) %&gt;% mutate\n\n# join the table to get the game played, W, L for each team\nrecord_2023_v3 &lt;- record_2023_v2 %&gt;% left_join(mlb_teams, by = c(\"Opp\" = \"Abbreviation\")) %&gt;% left_join(status_2023_v1, by=c(\"Full_Name\"=\"Tm\"))\n\n# Create custom hover text\n# record_2023_v3$hover_text &lt;- paste(\"Team: \", record_2023_v3$Full_Name, \"&lt;br&gt;Game Count: \", record_2023_v3$Game_Count_2023, '&lt;br&gt;&lt;img src=\"', record_2023_v3$Logo, '\" width=\"50\" height=\"50\" /&gt;', sep = \"\")\nrecord_2023_v3$hover_text &lt;- paste(\"Team: \", record_2023_v3$Full_Name, \"&lt;br&gt;Game Count: \", record_2023_v3$Game_Count_2023,sep = \"\")\n\n\n# Load the data\nrecord_2019 &lt;- read_csv(\"../data/2019_record.csv\") \n# https://www.baseball-reference.com/teams/WSN/2019-schedule-scores.shtml\n\n# Load the new data\nstatus_2019 &lt;- read.csv(\"../data/2019_stats.csv\")\n# https://www.baseball-reference.com/leagues/majors/2019-standings.shtml\n\n# Select the W, L and team name\nstatus_2019_v1 &lt;- status_2019 %&gt;% select(Tm,W,L)\n\n# Get the W Loss Margin columns for 2019\nrecord_2019_v2 &lt;- record_2019 %&gt;% select('W/L','R','RA','Opp') %&gt;% mutate(Margin=R-RA) %&gt;% group_by(Opp) %&gt;% summarize(Game_Count_2019 = n(),Margin_avg=mean(Margin))\n\n# Add a rank column to create color bins for better visuals\nrecord_2019_v2 &lt;- record_2019_v2 %&gt;% mutate(Rank = rank(Game_Count_2019, ties.method = \"min\")) %&gt;% mutate\n\n# join the table to get the game played, W, L for each team\nrecord_2019_v3 &lt;- record_2019_v2 %&gt;% left_join(mlb_teams, by = c(\"Opp\" = \"Abbreviation\")) %&gt;% left_join(status_2019_v1, by=c(\"Full_Name\"=\"Tm\"))\n\n# Create custom hover text\n# record_2019_v3$hover_text &lt;- paste(\"Team: \", record_2019_v3$Full_Name, \"&lt;br&gt;Game Count: \", record_2019_v3$Game_Count_2019, '&lt;br&gt;&lt;img src=\"', record_2019_v3$Logo, '\" width=\"50\" height=\"50\" /&gt;', sep = \"\")\nrecord_2019_v3$hover_text &lt;- paste(\"Team: \", record_2019_v3$Full_Name, \"&lt;br&gt;Game Count: \", record_2019_v3$Game_Count_2019,sep = \"\")\n\n# Create the 2023 plot\nfig &lt;- plot_ly() %&gt;%\n  add_markers(data = record_2023_v3, x = ~W, y = ~Margin_avg,\n              marker = list(size = ~Game_Count_2023*100, sizemode = 'area',\n                            color = ~Rank, colorscale = 'Viridis', alpha = 0.4),\n              mode = 'markers',\n              text = ~Opp,  # Display team names inside the bubbles\n              textfont = list(size = 12),\n              textposition = 'middle center',  # Position the text in the center of the bubbles\n              hoverinfo = 'text',\n              hovertext = ~paste(\"Team:\", Full_Name, \"&lt;br&gt;Game Count: \", Game_Count_2023),\n              name = '2023',\n              visible = T) # Ensure the 2023 data is visible by default\n\n# Add the 2019 data to the same plot\nfig &lt;- fig %&gt;%\n  add_markers(data = record_2019_v3, x = ~W, y = ~Margin_avg,\n              marker = list(size = ~Game_Count_2019*100, sizemode = 'area',\n                            color = ~Rank, colorscale = 'Viridis', alpha = 0.4),\n              mode = 'markers+text',\n              text = ~Opp,  # Display team names inside the bubbles\n              textposition = 'middle center',  # Position the text in the center of the bubbles\n              hoverinfo = 'text',\n              textfont = list(size = 12),\n              hovertext = ~paste(\"Team:\", Full_Name, \"&lt;br&gt;Game Count: \", Game_Count_2019),\n              name = '2019',\n              visible = F) # Start with this trace hidden\n\n# Customize the layout with a toggle button\nfig &lt;- fig %&gt;%\n  layout(\n    title = 'Wins and Margins Plot By Opponent Teams',\n    xaxis = list(title = 'Wins', range = c(45, 110)),\n    yaxis = list(title = 'Avg Margin'),\n    updatemenus = list(\n      list(\n        type = 'buttons',\n        direction = 'left',\n        x = -0.1,\n        xanchor = 'left',\n        y = 1.1,\n        yanchor = 'top',\n        buttons = list(\n          list(method = \"update\",\n               args = list(list(visible = c(TRUE, FALSE)),\n                           list(title = \"Wins and Margins Plot By Opponent Teams in 2023\")),\n               label = \"2023\"),\n          list(method = \"update\",\n               args = list(list(visible = c(FALSE, TRUE)),\n                           list(title = \"Wins and Margins Plot By Opponent Teams in 2019\")),\n               label = \"2019\")\n        )\n      )\n    )\n  )\n\n# Show the plot\nfig\n\n\n\n\nFigure 3: Scatter Bubble Chart for Opponent Team Average Margins and Wins in 2019 and 2023. The x-axis represents the number of games won, and the y-axis represents the average margin per game. The size of each bubble indicates the number of games played against the Washington Nationals, and the color categorizes the games into different clusters. Data was obtained from https://www.baseball-reference.com/leagues/majors/2023-standings.shtml, https://www.baseball-reference.com/leagues/majors/2019-standings.shtml, https://www.baseball-reference.com/teams/WSN/2023-schedule-scores.shtml, and https://www.baseball-reference.com/teams/WSN/2019-schedule-scores.shtml.\n\n\nBy toggling between 2019 and 2023, the games played against different teams changed slightly, but the Washington Nationals still played the most games against the following four teams: Miami Marlins, Philadelphia Phillies, Atlanta Braves, and New York Mets. Comparing the records for those four teams, the games they won in 2019 and 2023 remained quite consistent, but the winning margins were much smaller in 2023. This indicates a slightly worse performance for the four teams the Nationals played the most. It indirectly suggests that the Nationals’ poorer record in 2023 is not directly due to their opponents’ strength, but more likely due to their own diminished capabilities. Now, let’s dig into more statistics from the team’s operational management level.\n\n\n\n\n\nCode\n# Load the data\nlibrary(plotly)\nlibrary(tidyverse)\n# Source: https://legacy.baseballprospectus.com/compensation/?team=WAS\nsalary_2019 &lt;- read_csv(\"../data/Salary_2019.csv\")\n# Source: https://www.spotrac.com/mlb/washington-nationals/payroll/2023/\nsalary_2023 &lt;- read_csv(\"../data/Salary_2023.csv\")\n\n# Looking at position and salary column\nsalary_2019 &lt;- salary_2019 %&gt;% dplyr::select(\"Pos\",\"Salary\") %&gt;% na.omit()\nsalary_2023 &lt;- salary_2023 %&gt;% dplyr::select(\"POS.\",\"BASE SALARY\") %&gt;% na.omit()\n\n# check positions in each dataset\n# unique(salary_2019$Pos)\n# unique(salary_2023$`POS.`)\n\n# replace the 2023 \"RP/CL\" to \"RP\", change the dollar format into value format\nsalary_2023 &lt;- salary_2023 %&gt;% mutate(Pos = ifelse(`POS.`!=\"RP/CL\",`POS.`,\"RP\")) %&gt;% mutate(Salary_2023=as.numeric(gsub(\"\\\\$\", \"\", gsub(\",\", \"\", `BASE SALARY`))))  %&gt;% dplyr::select(Pos, Salary_2023)\n\n# change the 2019 data dollar format into value format\nsalary_2019 &lt;- salary_2019 %&gt;% mutate(Salary_2019=as.numeric(gsub(\"\\\\$\", \"\", gsub(\",\", \"\", Salary))))\n\n# Group by position\nsalary_2023_1 &lt;- salary_2023 %&gt;% group_by(Pos) %&gt;% summarize(salary_sum_2023=sum(as.numeric(Salary_2023)))\n# calculate total\nsalary_2023_1$total_2023 &lt;- sum(salary_2023_1$salary_sum_2023)\n# calculate percentage\nsalary_2023_1$percentage_2023 &lt;- salary_2023_1$salary_sum_2023/salary_2023_1$total_2023\n\n# Group by position\nsalary_2019_1 &lt;- salary_2019 %&gt;% group_by(Pos) %&gt;% summarize(salary_sum_2019=sum(as.numeric(Salary_2019)))\n# calculate total\nsalary_2019_1$total_2019 &lt;- sum(salary_2019_1$salary_sum_2019)\n# calculate percentage\nsalary_2019_1$percentage_2019 &lt;- salary_2019_1$salary_sum_2019/salary_2019_1$total_2019\n\n# Choose the top 4 and combine the rest\ntop_four_2019 &lt;- salary_2019_1 %&gt;% arrange(desc(percentage_2019)) %&gt;% slice(1:4)\nothers_2019 &lt;- salary_2019_1 %&gt;% arrange(desc(percentage_2019)) %&gt;% slice(5:n()) %&gt;% summarise(Pos = 'Others',salary_sum_2019 = sum(salary_sum_2019),total_2019 = first(total_2019), percentage_2019 = sum(percentage_2019))\nsalary_2019_final &lt;- rbind(top_four_2019,others_2019)\n# Rename the positions\nsalary_2019_final &lt;- salary_2019_final %&gt;% mutate(Pos= case_when(\n  Pos == \"SP\" ~ \"Starting Pitcher\",\n  Pos == \"1B\"~ \"First Baseman\",\n  Pos == \"3B\"~ \"Third Baseman\",\n  Pos == \"RP\"~ \"Relief Pitcher\",\n  TRUE ~ \"Others\"))\n\n# Get the total salary for 2019\nsalary_total_2019 &lt;- mean(salary_2019_final$total_2019,na.rm=TRUE)\n\n# Choose the top 4 and combine the rest\ntop_four_2023 &lt;- salary_2023_1 %&gt;% arrange(desc(percentage_2023)) %&gt;% slice(1:4)\nothers_2023 &lt;- salary_2023_1 %&gt;% arrange(desc(percentage_2023)) %&gt;% slice(5:n()) %&gt;% summarise(Pos = 'Others',salary_sum_2023 = sum(salary_sum_2023),total_2023 = first(total_2023), percentage_2023 = sum(percentage_2023))\nsalary_2023_final &lt;- rbind(top_four_2023,others_2023)\n# Rename the positions\nsalary_2023_final &lt;- salary_2023_final %&gt;% mutate(Pos= case_when(\n  Pos == \"SP\" ~ \"Starting Pitcher\",\n  Pos == \"1B\"~ \"First Baseman\",\n  Pos == \"2B\"~ \"Second Baseman\",\n  Pos == \"RP\"~ \"Relief Pitcher\",\n  TRUE ~ \"Others\"))\n\n# Get the total salary for 2023\nsalary_total_2023 &lt;- mean(salary_2023_final$total_2023,na.rm=TRUE)\n\n\n# Create pie chart for the first dataset\npie1 &lt;- plot_ly(salary_2019_final, labels = ~Pos, values = ~salary_sum_2019, type = 'pie',\n                textinfo = 'percent',\n                text = ~paste(\"2019 Total Payroll:\", format(salary_total_2019, big.mark = \",\", scientific = FALSE), \"&lt;br&gt;Position:\", salary_2019_final$Pos, \"&lt;br&gt;Salary:\",format(salary_2019_final$salary_sum_2019, big.mark = \",\", scientific = FALSE)),\n                hoverinfo = 'text',\n                textposition = 'inside',     # Position the text inside the slices\n                marker = list(\n                  colors = c('#0072B2','#F0E442', '#D55E00', '#CC79A7', '#009E73'), # Assign new colors\n                  line = list(color = '#FFFFFF', width = 2)  # Set slice borders\n                ),\n                domain = list(x = c(0, 0.6), y = c(0, 1)),\n                name = \"2019 Payroll\") %&gt;% \n  layout(title = \"2019 Payroll Allocations\", showlegend = TRUE)\n\n# Create pie chart for the second dataset\npie2 &lt;- plot_ly(salary_2023_final, labels = ~Pos, values = ~salary_sum_2023, type = 'pie',\n                textinfo = 'percent',\n                text = ~paste(\"2023 Total Payroll:\", format(salary_total_2023, big.mark = \",\", scientific = FALSE), \"&lt;br&gt;Position:\", salary_2023_final$Pos, \"&lt;br&gt;Salary:\",format(salary_2023_final$salary_sum_2023, big.mark = \",\", scientific = FALSE)),\n                hoverinfo = 'text',\n                textposition = 'inside',     # Position the text inside the slices\n                marker = list(\n                  colors = c('#0072B2','#F0E442', '#FF0000', '#CC79A7', '#009E73'), # Assign new colors\n                  line = list(color = '#FFFFFF', width = 2)  # Set slice borders\n                ),\n                domain = list(x = c(0.6, 1), y = c(0, 0.5)),\n                name = \"2023 Payroll\") %&gt;% \n  layout(title = \"2023 Payroll Allocations\", showlegend = TRUE)\n\n# Combine the pie charts side by side\nsubplot(pie1, pie2, nrows = 1, shareX = TRUE, shareY = TRUE, titleX = TRUE) %&gt;%\n  layout(title = \"Payroll Pie Charts, 2019(Left) Versus 2023(Right)\")\n\n\n\n\nFigure 4: Pie Chart for Washington Nationals Payroll by Positions in 2019 and 2023. The two charts show the total payroll by the top 5 positions. The top 4 positions were kept, while the remaining are grouped into the ‘Others’ category. The size of the pie chart is proportional to the payroll size in 2019 and 2023, respectively. The 2019 data is obtained from https://legacy.baseballprospectus.com/compensation/?team=WAS, and the 2023 data is obtained from https://www.spotrac.com/mlb/washington-nationals/payroll/2023/.\n\n\n\n\nCode\n# Load the data\nlibrary(plotly)\nlibrary(tidyverse)\n# Source: https://legacy.baseballprospectus.com/compensation/?team=WAS\nsalary_2019 &lt;- read_csv(\"../data/Salary_2019.csv\")\n# Source: https://www.spotrac.com/mlb/washington-nationals/payroll/2023/\nsalary_2023 &lt;- read_csv(\"../data/Salary_2023.csv\")\n\n# Looking at position and salary column\nsalary_2019 &lt;- salary_2019 %&gt;% dplyr::select(\"Pos\",\"Salary\") %&gt;% na.omit()\nsalary_2023 &lt;- salary_2023 %&gt;% dplyr::select(\"POS.\",\"BASE SALARY\") %&gt;% na.omit()\n\n# check positions in each dataset\n# unique(salary_2019$Pos)\n# unique(salary_2023$`POS.`)\n\n# replace the 2023 \"RP/CL\" to \"RP\", change the dollar format into value format\nsalary_2023 &lt;- salary_2023 %&gt;% mutate(Pos = ifelse(`POS.`!=\"RP/CL\",`POS.`,\"RP\")) %&gt;% mutate(Salary_2023=as.numeric(gsub(\"\\\\$\", \"\", gsub(\",\", \"\", `BASE SALARY`))))  %&gt;% dplyr::select(Pos, Salary_2023)\n\n# change the 2019 data dollar format into value format\nsalary_2019 &lt;- salary_2019 %&gt;% mutate(Salary_2019=as.numeric(gsub(\"\\\\$\", \"\", gsub(\",\", \"\", Salary))))\n\n# Group by position\nsalary_2023_1 &lt;- salary_2023 %&gt;% group_by(Pos) %&gt;% summarize(salary_sum_2023=sum(as.numeric(Salary_2023)))\n# calculate total\nsalary_2023_1$total_2023 &lt;- sum(salary_2023_1$salary_sum_2023)\n# calculate percentage\nsalary_2023_1$percentage_2023 &lt;- salary_2023_1$salary_sum_2023/salary_2023_1$total_2023\n\n# Group by position\nsalary_2019_1 &lt;- salary_2019 %&gt;% group_by(Pos) %&gt;% summarize(salary_sum_2019=sum(as.numeric(Salary_2019)))\n# calculate total\nsalary_2019_1$total_2019 &lt;- sum(salary_2019_1$salary_sum_2019)\n# calculate percentage\nsalary_2019_1$percentage_2019 &lt;- salary_2019_1$salary_sum_2019/salary_2019_1$total_2019\n\n# Choose the top 4 and combine the rest\ntop_four_2019 &lt;- salary_2019_1 %&gt;% arrange(desc(percentage_2019)) %&gt;% slice(1:4)\nothers_2019 &lt;- salary_2019_1 %&gt;% arrange(desc(percentage_2019)) %&gt;% slice(5:n()) %&gt;% summarise(Pos = 'Others',salary_sum_2019 = sum(salary_sum_2019),total_2019 = first(total_2019), percentage_2019 = sum(percentage_2019))\nsalary_2019_final &lt;- rbind(top_four_2019,others_2019)\n# Rename the positions\nsalary_2019_final &lt;- salary_2019_final %&gt;% mutate(Pos= case_when(\n  Pos == \"SP\" ~ \"Starting Pitcher\",\n  Pos == \"1B\"~ \"First Baseman\",\n  Pos == \"3B\"~ \"Other Baseman\",\n  Pos == \"RP\"~ \"Relief Pitcher\",\n  TRUE ~ \"Others\"))\n\n# Get the total salary for 2019\nsalary_total_2019 &lt;- mean(salary_2019_final$total_2019,na.rm=TRUE)\n\n# Choose the top 4 and combine the rest\ntop_four_2023 &lt;- salary_2023_1 %&gt;% arrange(desc(percentage_2023)) %&gt;% slice(1:4)\nothers_2023 &lt;- salary_2023_1 %&gt;% arrange(desc(percentage_2023)) %&gt;% slice(5:n()) %&gt;% summarise(Pos = 'Others',salary_sum_2023 = sum(salary_sum_2023),total_2023 = first(total_2023), percentage_2023 = sum(percentage_2023))\nsalary_2023_final &lt;- rbind(top_four_2023,others_2023)\n# Rename the positions\nsalary_2023_final &lt;- salary_2023_final %&gt;% mutate(Pos= case_when(\n  Pos == \"SP\" ~ \"Starting Pitcher\",\n  Pos == \"1B\"~ \"First Baseman\",\n  Pos == \"2B\"~ \"Other Baseman\",\n  Pos == \"RP\"~ \"Relief Pitcher\",\n  TRUE ~ \"Others\"))\n\n# Get the total salary for 2023\nsalary_total_2023 &lt;- mean(salary_2023_final$total_2023,na.rm=TRUE)\n\nsalary_combined &lt;- salary_2019_final %&gt;% left_join(salary_2023_final,by='Pos') %&gt;% mutate(change_percent = (percentage_2023-percentage_2019)) %&gt;% mutate(change_dollar = salary_sum_2023- salary_sum_2019) %&gt;% mutate(percentage_shift =change_dollar/salary_sum_2019) %&gt;% dplyr::select(\"Pos\",\"change_percent\",\"change_dollar\",\"percentage_shift\")\n\n# Create separate hover texts for each metric\nhover_text_dollars &lt;- with(salary_combined, paste(\n  \"Position: \", Pos, \"&lt;br&gt;\",\n  \"Change in Dollars: $\", format(change_dollar, big.mark = \",\")\n))\n\nhover_text_percent &lt;- with(salary_combined, paste(\n  \"Position: \", Pos, \"&lt;br&gt;\",\n  \"Change Percent: \", format(change_percent * 100, digits = 2, nsmall = 2), \"%\"\n))\n\nhover_text_shift &lt;- with(salary_combined, paste(\n  \"Position: \", Pos, \"&lt;br&gt;\",\n  \"Percentage Shift: \", format(percentage_shift * 100, digits = 2, nsmall = 2), \"%\"\n))\n\n# Create the initial plot with the default display set to 'change_dollar'\np &lt;- plot_ly(\n  data = salary_combined, \n  x = ~Pos, \n  y = ~change_dollar, \n  type = 'bar', \n  name = 'Change in Dollars',\n  text = ~hover_text_dollars, # Assign initial hover text\n  hoverinfo = \"text\", # Specify that hoverinfo should show text\n  marker = list(color = 'rgb(49,130,189)'),\n  textposition = 'none'\n)\n\n# Adding the update menu for toggling\np &lt;- p %&gt;% layout(\n  title = \"Washington Nationals Payroll Changes from 2019 to 2023\",\n  xaxis = list(title = \"Position\"),\n  yaxis = list(title = \"Change in Dollars\"), # Initial y-axis title\n  updatemenus = list(\n    list(\n      type = \"buttons\",\n      direction = \"left\",\n      x = 0,\n      xanchor = \"left\",\n      y = -0.1,\n      yanchor = \"top\",\n      buttons = list(\n        list(\n          method = \"update\",\n          args = list(list(\"y\" = list(salary_combined$change_dollar), \"text\" = list(hover_text_dollars)), \n                      list(\"yaxis.title\" = \"Change in Dollars\")),\n          label = \"Change in Dollars\"\n        ),\n        list(\n          method = \"update\",\n          args = list(list(\"y\" = list(salary_combined$change_percent), \"text\" = list(hover_text_percent)),\n                      list(\"yaxis.title\" = \"Change in Proportion\")),\n          label = \"Change in Proportion\"\n        ),\n        list(\n          method = \"update\",\n          args = list(list(\"y\" = list(salary_combined$percentage_shift), \"text\" = list(hover_text_shift)),\n                      list(\"yaxis.title\" = \"Proportion Shift Based on 2019 Payroll\")),\n          label = \"Proportion Shift Based on 2019 Dollars\"\n        )\n      )\n    )\n  )\n)\n\n# Print the plot\np\n\n\n\n\nFigure 5: Bar Chart for Washington Nationals Payroll Changes by Positions between 2019 and 2023. This bar chart complements the pie chart by displaying three statistics. The first is the dollar value change for each position from 2019 to 2023. The second shows the proportion of that position’s salary change. The third statistic represents the dollar value change divided by the total 2019 salary for that position to provide a more detailed percentage shift. The 2019 data is obtained from https://legacy.baseballprospectus.com/compensation/?team=WAS, and the 2023 data is obtained from https://www.spotrac.com/mlb/washington-nationals/payroll/2023/.\n\n\nThe pie chart displays the total payroll by positions for the years 2019 and 2023. Accompanying this, a bar chart serves as a supplement, showing the dollar or percentage change from 2019 to 2023. There are two significant findings related to the payroll statistics. In 2019, the Washington Nationals spent almost twice the amount of money that they did in 2023. All positions show a decrease in dollar values according to the bar chart. This raises significant questions: What caused the large decrease in total payroll from 2019 to 2023? What occurred at the team operational level? On the other hand, proportionally, the Nationals allocated much more money to pitchers in 2023, attempting to invest the same amount of money to sign star pitchers. According to the proportion shift graph, the baseman positions experienced the largest decrease in dollar value change divided by the 2019 payroll, indicating that in 2023, these positions were not prioritized in the team-building process. This is a significant issue since, ideally, teams need to distribute their spending evenly across different positions to achieve a more balanced team. Although an outstanding pitcher is key to a competitive team, fans might also want to see star batters who can produce more home runs. In general, people prefer offense over defense.\n\n\n\n\n\nCode\nlibrary(tidyverse)\n# Load the data\nstadium &lt;- read_csv(\"../data/Nationals_Stadium_Stats.csv\")\n# https://www.baseball-reference.com/teams/WSN/attend.shtml\n\n# Drop year 2020 due to the Covid impact\nstadium &lt;- stadium %&gt;% filter (Year!=2020 & Year!=2024)\n\n# Convert 'Est. Payroll' to numeric after removing commas and dollar signs\nstadium$`Est. Payroll` &lt;- as.numeric(gsub(\"[,$]\", \"\", stadium$`Est. Payroll`))\n\nlibrary(readxl)\n# read the revenue related file\n# Get the names of all sheets in the Excel file\nsheets1 &lt;- excel_sheets(\"../data/statistic_id203506_washington-nationals-average-ticket-price-2006-2023.xlsx\")\n\n# Read the second tab (assuming its name is stored in the variable 'sheet_name')\nticket &lt;- read_excel(\"../data/statistic_id203506_washington-nationals-average-ticket-price-2006-2023.xlsx\", sheet = sheets1[2])\n\n# Drop the unused rows\nticket &lt;- ticket %&gt;% na.omit()\n\n# Replace column names\nnames(ticket) &lt;- c('Year','Ticket Price')\n\n# Remove year 2020 due to Covid impact and the additional years outside 2008 to 2023 to match the time scale\nticket &lt;- ticket %&gt;% filter (Year!=2020 & Year &gt;= 2008 ) %&gt;% mutate(Year = as.numeric(Year))\n\n# Join the ticket price column to the stadium dataset\nstadium_combined &lt;- stadium %&gt;% left_join(ticket,by='Year')\n\n# read the revenue related file\n# Get the names of all sheets in the Excel file\nsheets2 &lt;- excel_sheets(\"../data/statistic_id196692_washington-nationals-revenue-2001-2022.xlsx\")\n\n# Read the second tab (assuming its name is stored in the variable 'sheet_name')\nrevenue &lt;- read_excel(\"../data/statistic_id196692_washington-nationals-revenue-2001-2022.xlsx\", sheet = sheets2[2])\n\n# Drop the unused rows\nrevenue &lt;- revenue %&gt;% na.omit()\n\n# Replace column names\nnames(revenue) &lt;- c('Year','Revenue')\n\n# Remove year 2020 due to Covid impact and the additional years outside 2008 to 2023 to match the time scale\nrevenue &lt;- revenue %&gt;% filter (Year!=2020 & Year &gt;= 2008 ) %&gt;% mutate(Year = as.numeric(Year))\n\n# Join the revenue column to the stadium dataset\nstadium_final &lt;- stadium_combined %&gt;% left_join(revenue,by='Year')\n\nlibrary(plotly)\n# Create a base plot with hover text\np &lt;- plot_ly(stadium_final, x = ~Year, y = ~Attendance, type = 'scatter', mode = 'lines+markers', name = 'Attendance',\n             text = ~paste(\"Year:\", Year, \"&lt;br&gt;Attendance:\", format(Attendance, big.mark = \",\", scientific = FALSE)), hoverinfo = 'text')\n\n# Add other traces with their respective hover text\np &lt;- p %&gt;% add_trace(y = ~`Est. Payroll`, name = \"Estimated Payroll\", visible = F,\n                     text = ~paste(\"Year:\", Year, \"&lt;br&gt;Payroll:\", format(`Est. Payroll`, big.mark = \",\", scientific = FALSE)), hoverinfo = 'text')\np &lt;- p %&gt;% add_trace(y = ~`Ticket Price`, name = \"Average Ticket Price\", visible = F,\n                     text = ~paste(\"Year:\", Year, \"&lt;br&gt;Price:\", `Ticket Price`, \"$\"), hoverinfo = 'text')\np &lt;- p %&gt;% add_trace(y = ~Revenue, name = \"Revenue\", visible = F,\n                     text = ~paste(\"Year:\", Year, \"&lt;br&gt;Revenune in Millions:\", Revenue), hoverinfo = 'text')\np &lt;- p %&gt;% add_trace(y = ~PPF, name = \"Pitcher's Park Factor\", visible = F,\n                     text = ~paste(\"Year:\", Year, \"&lt;br&gt;Factor Value:\", PPF), hoverinfo = 'text')\np &lt;- p %&gt;% add_trace(y = ~BPF, name = \"Batter's Park Factor\", visible = F,\n                     text = ~paste(\"Year:\", Year, \"&lt;br&gt;Factor Value:\", BPF), hoverinfo = 'text')\n\n# Define layout and buttons for interactivity\nfinal_plot &lt;- p %&gt;% layout(\n  title = 'Interactive Visualization of Washington Nationals Statistics',\n  xaxis = list(title = 'Year'),\n  yaxis = list(title = 'Value'),\n  updatemenus = list(\n    list(\n      type = 'buttons',\n      direction = 'left',\n      x = 0,\n      xanchor = 'left',\n      y = -0.2,\n      yanchor = 'top',\n      buttons = list(\n        list(method = 'update', args = list(list(visible = c(TRUE, FALSE, FALSE, FALSE, FALSE, FALSE)), list(title = 'Attendance')), label = 'Attendance'),\n        list(method = 'update', args = list(list(visible = c(FALSE, TRUE, FALSE, FALSE, FALSE, FALSE)), list(title = 'Estimated Payroll')), label = 'Payroll'),\n        list(method = 'update', args = list(list(visible = c(FALSE, FALSE, TRUE, FALSE, FALSE, FALSE)), list(title = 'Average Ticket Price')), label = 'Ticket Price'),\n        list(method = 'update', args = list(list(visible = c(FALSE, FALSE, FALSE, TRUE, FALSE, FALSE)), list(title = 'Revenue')), label = 'Revenue'),\n        list(method = 'update', args = list(list(visible = c(FALSE, FALSE, FALSE, FALSE, TRUE, FALSE)), list(title = 'Pitcher\\'s Park Factor')), label = 'PPF'),\n        list(method = 'update', args = list(list(visible = c(FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), list(title = 'Batter\\'s Park Factor')), label = 'BPF')\n      )\n    )\n  )\n)\n\n# Show the plot\nfinal_plot\n\n\n\n\nFigure 6: Line Chart for Washington Nationals Stadium, Revenue, and Payroll related statistics from 2008 to 2023. The chart contains six aspects: ‘Attendance’, ‘Estimated Payroll’, ‘Average Ticket Price’, ‘Revenue (millions)’, ‘Pitcher’s Park Factor’, and ‘Batter’s Park Factor’. Different aspects can be selected individually. Year 2020 is omitted due to the Covid impact of a short season. For Pitcher’s Park Factor (PPF), a number greater than 100 suggests that the park is harder on pitchers, more hitter-friendly. And for Batter’s Park Factor (BPF), a number greater than 100 suggests that the park is favorable for hitters, boosting offensive statistics. The ticket price data is obtained from https://www.statista.com/statistics/203506/washington-nationals-average-ticket-price/. The revenue data is obtained from https://www.statista.com/statistics/196692/revenue-of-the-washington-nationals-since-2006/. The other data is obtained from the source https://www.baseball-reference.com/teams/WSN/attend.shtml.\n\n\nThe last chart from the team operational perspective, representing trends from 2008 to 2023 at a team operational level, is a line chart that illustrates different aspects. Attendance and payroll both dropped significantly since 2019. However, interestingly, revenue has remained steady. This suggests that the Nationals’ management team has intentionally reduced spending on the team. While this could be part of a strategic plan, it may harm fan loyalty. The decrease in attendance has impacted the two park factors, which both dropped below 100. The Nationals need to initiate some marketing campaigns to attract more fan attendance, which could have a long-term impact on the team’s performance. In the next section, more statistics related to team offense and defense will be reviewed to see if any detailed strategies related to team building could be proposed.",
    "crumbs": [
      "Project Summary"
    ]
  },
  {
    "objectID": "project_summary.html#pitching-analysis-team-and-individual-levels",
    "href": "project_summary.html#pitching-analysis-team-and-individual-levels",
    "title": "Bring the Washington Nationals Back to MLB Championship Contention",
    "section": "Pitching Analysis: Team and Individual Levels",
    "text": "Pitching Analysis: Team and Individual Levels\n\n\nCode\n# Data prep - Pitching\nlibrary(openxlsx)\nlibrary(plotly)\nlibrary(tidyverse)\nlibrary(fmsb)\nlibrary(ggplot2)\nlibrary(readxl)\n\n\n\n# Read the datasets\npitching2019 &lt;- read_excel(\"../data/2019Washington_Pitching_Individual.xlsx\")\nbatting2019 &lt;- read_excel(\"../data/2019Washington_Batting_Individual.xlsx\")\n\npitching2023 &lt;- read_excel(\"../data/2023Washington_Pitching_Individual.xlsx\")\nbatting2023 &lt;- read_excel(\"../data/2023Washington_Batting_Individual.xlsx\")\n\n# Print the first few rows of the data to confirm it's read correctly\n# head(pitching2019)\n# head(batting2019)\n# head(pitching2023)\n# head(batting2023)\n\n# Convert columns to numeric, ignoring non-numeric values (coerce problems to NA)\npitching2019$ERA &lt;- as.numeric(pitching2019$ERA)\npitching2019$WHIP &lt;- as.numeric(pitching2019$WHIP)\npitching2019$SO9 &lt;- as.numeric(pitching2019$SO9)\n\npitching2023$ERA &lt;- as.numeric(pitching2023$ERA)\npitching2023$WHIP &lt;- as.numeric(pitching2023$WHIP)\npitching2023$SO9 &lt;- as.numeric(pitching2023$SO9)\n\n# Handle NA values by using mean with na.rm = TRUE\npitching_data &lt;- data.frame(\n  metric = c(\"ERA\", \"WHIP\", \"SO9\"),\n  `2019` = c(mean(pitching2019$ERA, na.rm = TRUE), mean(pitching2019$WHIP, na.rm = TRUE), mean(pitching2019$SO9, na.rm = TRUE)),\n  `2023` = c(mean(pitching2023$ERA, na.rm = TRUE), mean(pitching2023$WHIP, na.rm = TRUE), mean(pitching2023$SO9, na.rm = TRUE))\n)\n\n# Combined tables\n# Combined '2019' and '2023' for pitching & batting\n# Add a 'Year' column to each dataset\n\n# Filter on only SP and RP\npitching2019 &lt;- pitching2019 %&gt;% mutate(Year = 2019) %&gt;% filter(Pos==\"SP\"|Pos==\"RP\")\n\n# Filter on top 15 rank\nbatting2019 &lt;- batting2019 %&gt;% mutate(Year = 2019) %&gt;% filter(Rk &lt;= 15)\n\n# Filter on only SP and RP\npitching2023 &lt;- pitching2023 %&gt;% mutate(Year = 2023) %&gt;% filter(Pos==\"SP\"|Pos==\"RP\")\n\n# Filter on top 15 rank\nbatting2023 &lt;- batting2023 %&gt;% mutate(Year = 2023) %&gt;% filter(Rk &lt;= 15)\n\n# Combine the pitching datasets\ncombined_pitching &lt;- rbind(pitching2019, pitching2023)\n\n# Combine the batting datasets\ncombined_batting &lt;- rbind(batting2019, batting2023)\n\n# Drop Inf for ERA col in 'combined_pitching'\ncombined_pitching &lt;- combined_pitching[is.finite(combined_pitching$ERA), ]\n\n# Print the first few rows of the combined data to confirm it's combined correctly\n# head(combined_pitching)\n# head(combined_batting)\n\n# Calculate the mean of the provided pitching stats for the team\n# We first calculate the means of the statistics for the team\nteam_stats_2019 &lt;- pitching2019 %&gt;%\n  summarise(ERA = mean(ERA, na.rm = TRUE),\n            WHIP = mean(WHIP, na.rm = TRUE),\n            SO9 = mean(SO9, na.rm = TRUE),\n            FIP = mean(FIP, na.rm = TRUE),\n            H = mean(H, na.rm = TRUE),\n            R = mean(R, na.rm = TRUE))\n\ncategories &lt;- c(\"ERA\", \"WHIP\", \"SO9\", \"FIP\", \"H\", \"R\",\"ERA\")\n\nmax_values &lt;- c(ERA = max(combined_pitching$ERA), WHIP = max(combined_pitching$WHIP), SO9 = max(combined_pitching$SO9), FIP = max(combined_pitching$FIP), H = max(combined_pitching$H), R = max(combined_pitching$R)) # Upper limit of poor performance\nmin_values &lt;- c(ERA = min(combined_pitching$ERA), WHIP = min(combined_pitching$WHIP), SO9 = min(combined_pitching$SO9), FIP = min(combined_pitching$FIP), H = min(combined_pitching$H), R = min(combined_pitching$R)) # Lower limit of good performance\n\n# Normalize the stats (Lower is better for ERA, WHIP, FIP, H, and R; higher is better for SO9)\n# For ERA, WHIP, FIP, H, R we subtract from the max value to invert the scale\nteam_stats_normalized_2019 &lt;- mutate(team_stats_2019,\n                                     ERA = (max_values['ERA'] - ERA) / (max_values['ERA'] - min_values['ERA']),\n                                     WHIP = (max_values['WHIP'] - WHIP) / (max_values['WHIP'] - min_values['WHIP']),\n                                     SO9 = (SO9-min_values['SO9']) / (max_values['SO9'] - min_values['SO9']),\n                                     FIP = (max_values['FIP'] - FIP) / (max_values['FIP'] - min_values['FIP']),\n                                     H = (max_values['H'] - H) / (max_values['H'] - min_values['H']),\n                                     R = (max_values['R'] - R) / (max_values['R'] - min_values['R']))\n\nvalues_2019 &lt;- c(team_stats_normalized_2019$ERA, team_stats_normalized_2019$WHIP, team_stats_normalized_2019$SO9,\n                 team_stats_normalized_2019$FIP, team_stats_normalized_2019$H, team_stats_normalized_2019$R)\nvalues_2019 &lt;- c(values_2019, values_2019[1]) # Add the first value to the end to close the radar chart\n\nteam_stats_2023 &lt;- pitching2023 %&gt;%\n  summarise(ERA = mean(ERA, na.rm = TRUE),\n            WHIP = mean(WHIP, na.rm = TRUE),\n            SO9 = mean(SO9, na.rm = TRUE),\n            FIP = mean(FIP, na.rm = TRUE),\n            H = mean(H, na.rm = TRUE),\n            R = mean(R, na.rm = TRUE))\n\ncategories &lt;- c(\"ERA\", \"WHIP\", \"SO9\", \"FIP\", \"H\", \"R\",\"ERA\")\n\nmax_values &lt;- c(ERA = max(combined_pitching$ERA), WHIP = max(combined_pitching$WHIP), SO9 = max(combined_pitching$SO9), FIP = max(combined_pitching$FIP), H = max(combined_pitching$H), R = max(combined_pitching$R)) # Upper limit of poor performance\nmin_values &lt;- c(ERA = min(combined_pitching$ERA), WHIP = min(combined_pitching$WHIP), SO9 = min(combined_pitching$SO9), FIP = min(combined_pitching$FIP), H = min(combined_pitching$H), R = min(combined_pitching$R)) # Lower limit of good performance\n\n# Normalize the stats (Lower is better for ERA, WHIP, FIP, H, and R; higher is better for SO9)\n# For ERA, WHIP, FIP, H, R we subtract from the max value to invert the scale\nteam_stats_normalized_2023 &lt;- mutate(team_stats_2023,\n                                     ERA = (max_values['ERA'] - ERA) / (max_values['ERA'] - min_values['ERA']),\n                                     WHIP = (max_values['WHIP'] - WHIP) / (max_values['WHIP'] - min_values['WHIP']),\n                                     SO9 = (SO9-min_values['SO9']) / (max_values['SO9'] - min_values['SO9']),\n                                     FIP = (max_values['FIP'] - FIP) / (max_values['FIP'] - min_values['FIP']),\n                                     H = (max_values['H'] - H) / (max_values['H'] - min_values['H']),\n                                     R = (max_values['R'] - R) / (max_values['R'] - min_values['R']))\n\nvalues_2023 &lt;- c(team_stats_normalized_2023$ERA, team_stats_normalized_2023$WHIP, team_stats_normalized_2023$SO9,\n                 team_stats_normalized_2023$FIP, team_stats_normalized_2023$H, team_stats_normalized_2023$R)\nvalues_2023 &lt;- c(values_2023, values_2023[1]) # Add the first value to the end to close the radar chart\n\n# Create the original values\nvalues_2019_org &lt;- unlist(team_stats_2019)\nvalues_2019_org &lt;- c(values_2019_org, values_2019_org[1]) # Add the first value to the end to close the radar chart\n\nvalues_2023_org &lt;- unlist(team_stats_2023)\nvalues_2023_org &lt;- c(values_2023_org, values_2023_org[1]) # Add the first value to the end to close the radar chart\n\n\n\n# Create a radar chart in plotly with both 2019 and 2023 data\np1 &lt;- plot_ly() %&gt;%\n  add_trace(\n    type = 'scatterpolar',\n    mode = 'markers+lines',\n    fill = 'toself',\n    r = values_2019,\n    theta = categories,\n    fillcolor = 'rgba(255, 0, 0, 0.5)',\n    line = list(color = 'rgba(255, 0, 0, 0.5)'),\n    hoverinfo='text',\n    hovertext= ~paste(\"2019\",\"&lt;br&gt;Stat:\",categories,\"&lt;br&gt;Original Value:\", round(values_2019_org,3)),\n    name = '2019'\n  ) %&gt;%\n  add_trace(\n    type = 'scatterpolar',\n    mode = 'markers+lines',\n    fill = 'toself',\n    r = values_2023,\n    theta = categories,\n    fillcolor = 'rgba(0, 0, 255, 0.5)',\n    line = list(color = 'rgba(0, 0, 255, 0.5)'),\n    hoverinfo='text',\n    hovertext= ~paste(\"2023\",\"&lt;br&gt;Stat:\",categories,\"&lt;br&gt;Original Value:\", round(values_2023_org,3)),\n    name = '2023'\n  ) %&gt;%\n  layout(\n    polar = list(\n      radialaxis = list(\n        visible = TRUE,\n        range = c(0, 1)\n      )\n    ),\n    showlegend = TRUE,\n    title = \"Team Pitching Stats Radar Chart (2019 vs 2023)\"\n  )\n\n# Print the plot\np1\n\n\n\n\nFigure 7: The radar chart provides a comparative analysis of the Washington Nationals’ pitching performance across the 2019 and 2023 seasons, with the 2019 data represented by a pink area and the 2023 data by a purple area. This visualization indicates that the team’s pitching was more effective in 2019 across all six key metrics. After normalization, the Fielding Independent Pitching metric, which estimates a pitcher’s effectiveness at preventing home runs, walks, and other negative outcomes, shows a significant gap favoring 2019. Additionally, the WHIP metric suggests better control and efficiency for 2019, making it harder for opposing teams to score. A wider spread in the pink area along the SO9 axis also indicates a higher strikeout rate per nine innings, marking another aspect of pitching dominance in 2019. Higher values on the radar chart represent superior statistical performance. Data sources: https://www.baseball-reference.com/teams/WSN/2023.shtml#all_team_pitching and https://www.baseball-reference.com/teams/WSN/2019.shtml#all_team_pitching.\n\n\n\nSO9: Strikeouts Per 9 Innings\nWHIP: Walks and Hits Per Inning Pitched\nERA: Earned Run Average\nR: Runs Allowed\nH: Hits Allowed\nFIP: Fielding Independent Pitching\n\nAfter analyzing the six key pitching metrics for the Washington Nationals, a downward trend in performance is evident. Other than the “Hits Allowed” metric, which has not changed significantly, the other metrics clearly decreased in 2019. Notably, the data suggests a decline in individual pitchers’ skills, which warrants a detailed examination in the individual players’ section to identify specific areas of concern and potential improvements. This in-depth analysis is crucial for understanding the underlying issues contributing to the overall dip in pitching effectiveness.\n\n\nCode\nlibrary(tidyverse)\nlibrary(ggplot2)\n\npitch_2019 &lt;- read.csv('../data/player_pitching_2019.csv')\npitch_2023 &lt;- read.csv('../data/player_pitching_2023.csv')\n\ndf_2019 &lt;- pitch_2019 %&gt;%\n  filter(Tm=='WSN')%&gt;%\n  select(Name,IP,Tm,ERA,WHIP,H9,SO9,BB9)%&gt;%\n  arrange(desc(IP))%&gt;%\n  na.omit()%&gt;%\n  slice_head(n=20)\n\ndf_2023 &lt;- pitch_2023 %&gt;%\n  filter(Tm =='WSN')%&gt;%\n  select(Name,IP,Tm,ERA,WHIP,H9,SO9,BB9)%&gt;%\n  arrange(desc(IP))%&gt;%\n  na.omit()%&gt;%\n  slice_head(n=20)\n\ndf_2019_norm &lt;- df_2019 %&gt;%\n  mutate(across(.cols = c(IP, ERA, WHIP, H9, SO9,BB9), \n                .fns = ~ (. - min(.)) / (max(.) - min(.))))\n\ndf_2019_norm &lt;- df_2019_norm%&gt;%\n  mutate(ERA=1-ERA)%&gt;%\n  mutate(WHIP=1-WHIP)%&gt;%\n  mutate(H9=1-H9)%&gt;%\n  mutate(BB9=1-BB9)\n\n\ndf_2023_norm &lt;- df_2023 %&gt;%\n  mutate(across(.cols = c(IP, ERA, WHIP, H9, SO9,BB9), \n                .fns = ~ (. - min(.)) / (max(.) - min(.))))\n\ndf_2023_norm &lt;- df_2023_norm%&gt;%\n  mutate(ERA=1-ERA)%&gt;%\n  mutate(WHIP=1-WHIP)%&gt;%\n  mutate(H9=1-H9)%&gt;%\n  mutate(BB9=1-BB9)\n\nlibrary(plotly)\n\ntheta_labels= c('Earned Run Average', 'Walk+Hit per inning','Hit per 9 inning','StrikeOut per 9 inning','Walk per 9 inning')\n\nfig &lt;- plot_ly(\n  type = 'scatterpolar',\n  fill = 'toself'\n) \nfig &lt;- fig %&gt;%\n  add_trace(\n    r = unlist(as.numeric(df_2019_norm[1,4:8])),\n    theta = theta_labels,\n    fillcolor = 'rgba(255, 0, 0, 0.3)',\n    line = list(color = 'rgba(255, 0, 0, 0.5)'),\n    hoverinfo='text',\n    hovertext = ~paste(\"2019\",\"&lt;br&gt;Name:\",df_2019$Name[1], \"&lt;br&gt;Stat:\",colnames(df_2023[4:8]), c(df_2019[1,4:8])),\n    name = '2019'\n  ) \nfig &lt;- fig %&gt;%\n  add_trace(\n    r = unlist(as.numeric(df_2023_norm[1,4:8])),\n    theta = theta_labels,\n    fillcolor = 'rgba(0, 0, 255, 0.3)',\n    line = list(color = 'rgba(0, 0, 255, 0.5)'),\n    hoverinfo='text',\n    hovertext= ~paste(\"2023\",\"&lt;br&gt;Name:\",df_2023$Name[1],\"&lt;br&gt;Stat:\",colnames(df_2023[4:8]), c(df_2023[1,4:8])),\n    name = '2023'\n  ) \n\nfig &lt;- fig %&gt;%\n  add_trace(\n    r = unlist(as.numeric(df_2019_norm[2,4:8])),\n    theta = theta_labels,\n    fillcolor = 'rgba(255, 0, 0, 0.3)',\n    line = list(color = 'rgba(255, 0, 0, 0.5)'),\n    hoverinfo='text',\n    hovertext= ~paste(\"2019\",\"&lt;br&gt;Name:\",df_2019$Name[2],\"&lt;br&gt;Stat:\",colnames(df_2019[4:8]), c(df_2019[2,4:8])),\n    name = '2019',\n    visible=F\n  )\n\nfig &lt;- fig %&gt;%\n  add_trace(\n    r = unlist(as.numeric(df_2023_norm[2,4:8])),\n    theta = theta_labels,\n    fillcolor = 'rgba(0, 0, 255, 0.3)',\n    line = list(color = 'rgba(0, 0, 255, 0.5)'),\n    hoverinfo='text',\n    hovertext=paste(\"2023\",\"&lt;br&gt;Name:\",df_2023$Name[2],\"&lt;br&gt;Stat:\",colnames(df_2023[4:8]), c(df_2023[2,4:8])),\n    name = '2023',\n    visible=F\n  ) \n\nfig &lt;- fig %&gt;%\n  add_trace(\n    r = unlist(as.numeric(df_2019_norm[3,4:8])),\n    theta = theta_labels,\n    fillcolor = 'rgba(255, 0, 0, 0.3)',\n    line = list(color = 'rgba(255, 0, 0, 0.5)'),\n    hoverinfo='text',\n    hovertext=paste(\"2019\",\"&lt;br&gt;Name:\",df_2019$Name[3],\"&lt;br&gt;Stat:\",colnames(df_2019[4:8]), c(df_2019[3,4:8])),\n    name = '2019',\n    visible=F\n  )\n\nfig &lt;- fig %&gt;%\n  add_trace(\n    r = unlist(as.numeric(df_2023_norm[3,4:8])),\n    theta = theta_labels,\n    fillcolor = 'rgba(0, 0, 255, 0.3)',\n    line = list(color = 'rgba(0, 0, 255, 0.5)'),\n    hoverinfo='text',\n    hovertext=paste(\"2023\",\"&lt;br&gt;Name:\",df_2023$Name[3],\"&lt;br&gt;Stat:\",colnames(df_2023[4:8]),c(df_2023[3,4:8])),\n    name = '2023',\n    visible=F\n  )\n\nfig &lt;- fig %&gt;%\n  add_trace(\n    r = unlist(as.numeric(df_2019_norm[4,4:8])),\n    theta = theta_labels,\n    fillcolor = 'rgba(255, 0, 0, 0.3)',\n    line = list(color = 'rgba(255, 0, 0, 0.5)'),\n    hoverinfo='text',\n    hovertext=paste(\"2019\",\"&lt;br&gt;Name:\",df_2019$Name[4],\"&lt;br&gt;Stat:\",colnames(df_2019[4:8]), c(df_2019[4,4:8])),\n    name = '2019',\n    visible=F\n  )\n\nfig &lt;- fig %&gt;%\n  add_trace(\n    r = unlist(as.numeric(df_2023_norm[4,4:8])),\n    theta = theta_labels,\n    fillcolor = 'rgba(0, 0, 255, 0.3)',\n    line = list(color = 'rgba(0, 0, 255, 0.5)'),\n    hoverinfo='text',\n    hovertext=paste(\"2023\",\"&lt;br&gt;Name:\",df_2023$Name[4],\"&lt;br&gt;Stat:\",colnames(df_2023[4:8]), c(df_2023[4,4:8])),\n    name = '2023',\n    visible=F\n  )\n\nfig &lt;- fig %&gt;%\n  add_trace(\n    r = unlist(as.numeric(df_2019_norm[5,4:8])),\n    theta = theta_labels,\n    fillcolor = 'rgba(255, 0, 0, 0.3)',\n    line = list(color = 'rgba(255, 0, 0, 0.5)'),\n    hoverinfo='text',\n    hovertext=paste(\"2019\",\"&lt;br&gt;Name:\",df_2019$Name[5],\"&lt;br&gt;Stat:\",colnames(df_2019[4:8]), c(df_2019[5,4:8])),\n    name = '2019',\n    visible=F\n  )\n\nfig &lt;- fig %&gt;%\n  add_trace(\n    r = unlist(as.numeric(df_2023_norm[5,4:8])),\n    theta = theta_labels,\n    fillcolor = 'rgba(0, 0, 255, 0.3)',\n    line = list(color = 'rgba(0, 0, 255, 0.5)'),\n    hoverinfo='text',\n    hovertext=paste(\"2023\",\"&lt;br&gt;Name:\",df_2023$Name[5],\"&lt;br&gt;Stat:\",colnames(df_2023[4:8]),c(df_2023[5,4:8])),\n    name = '2023',\n    visible=F\n  )\n\nfig &lt;- fig %&gt;%\n  layout(\n    polar = list(\n      radialaxis = list(\n        range = c(0,1)\n      )\n    )\n  )\n\n\nfinal_plot &lt;- fig %&gt;% layout(\n  title = 'Washington Nationals Top 5 Pitchers 2019 vs 2023',\n  updatemenus = list(\n    list(\n      type = 'buttons',\n      direction = 'left',\n      x = 0,\n      xanchor = 'left',\n      y = -0.2,\n      yanchor = 'top',\n      buttons = list(\n        list(method = 'update', args = list(list(visible = c(T, T, T, F, F, F,F, F,F, F,F)), list(title = 'pitcher 1')), label = '1st pitcher'),\n        list(method = 'update', args = list(list(visible = c(T,F, F, T, T, F,F, F,F, F,F)), list(title = 'pitcher 2')), label = '2nd pitcher'),\n        list(method = 'update', args = list(list(visible = c(T,F, F, F, F, T,T, F,F, F,F)), list(title = 'pitcher 3')), label = '3rd pitcher'),\n        list(method = 'update', args = list(list(visible = c(T,F, F, F, F, F,F, T,T, F,F)), list(title = 'pitcher 4')), label = '4th pitcher'),\n        list(method = 'update', args = list(list(visible = c(T,F, F, F, F, F,F, F,F, T,T)), list(title = 'pitcher 5')), label = '5th pitcher')\n      )\n    )\n  )\n)\n\nfinal_plot\n\n\n\n\nFigure 8: Radar chart for top 5 appearence pitchers from the 2019 Nats and 2023 Nats. The radar plot contains 5 major individual aspect of pitchers: ‘Earned Run Average’, ‘Walk+Hit per inning’,‘Hit per 9 inning’,‘StrikeOut per 9 inning’,‘Walk per 9 inning’. The pitcher statistics data is obtained from https://www.baseball-reference.com/leagues/majors/2023-standard-pitching.shtml\n\n\nThis comparison highlights an intriguing contrast in pitcher performance between 2023 and 2019.3 out of top 5 pitchers from 2023 has significant weaker performance comparing to pitchers in 2019. Despite improvements in certain metrics for the rest of 2 2023 pitchers, numbers of hits remain relatively consistent. This suggests that the overall pitchers lineup in 2023 are weaker than lineup in 2019.",
    "crumbs": [
      "Project Summary"
    ]
  },
  {
    "objectID": "project_summary.html#batting-analysis-team-and-individual-levels",
    "href": "project_summary.html#batting-analysis-team-and-individual-levels",
    "title": "Bring the Washington Nationals Back to MLB Championship Contention",
    "section": "Batting Analysis: Team and Individual Levels",
    "text": "Batting Analysis: Team and Individual Levels\n\n\nCode\n# Washington Nationals 2019 vs 2023 Analysis\n  \n# Data prep \nlibrary(openxlsx)\nlibrary(plotly)\nlibrary(tidyverse)\nlibrary(fmsb)\nlibrary(ggplot2)\nlibrary(readxl)\n\n\n# Read the datasets\npitching2019 &lt;- read_excel(\"../data/2019Washington_Pitching_Individual.xlsx\")\nbatting2019 &lt;- read_excel(\"../data/2019Washington_Batting_Individual.xlsx\")\n\npitching2023 &lt;- read_excel(\"../data/2023Washington_Pitching_Individual.xlsx\")\nbatting2023 &lt;- read_excel(\"../data/2023Washington_Batting_Individual.xlsx\")\n\n# Print the first few rows of the data to confirm it's read correctly\n# head(pitching2019)\n# head(batting2019)\n# head(pitching2023)\n# head(batting2023)\n\n\n# Convert columns to numeric, ignoring non-numeric values (coerce problems to NA)\npitching2019$ERA &lt;- as.numeric(pitching2019$ERA)\npitching2019$WHIP &lt;- as.numeric(pitching2019$WHIP)\npitching2019$SO9 &lt;- as.numeric(pitching2019$SO9)\n\npitching2023$ERA &lt;- as.numeric(pitching2023$ERA)\npitching2023$WHIP &lt;- as.numeric(pitching2023$WHIP)\npitching2023$SO9 &lt;- as.numeric(pitching2023$SO9)\n\n# Handle NA values by using mean with na.rm = TRUE\npitching_data &lt;- data.frame(\n  metric = c(\"ERA\", \"WHIP\", \"SO9\"),\n  `2019` = c(mean(pitching2019$ERA, na.rm = TRUE), mean(pitching2019$WHIP, na.rm = TRUE), mean(pitching2019$SO9, na.rm = TRUE)),\n  `2023` = c(mean(pitching2023$ERA, na.rm = TRUE), mean(pitching2023$WHIP, na.rm = TRUE), mean(pitching2023$SO9, na.rm = TRUE))\n)\n\n\n\n# Combined '2019' and '2023' for pitching & batting\n# Add a 'Year' column to each dataset\n\n# Filter on only SP and RP\npitching2019 &lt;- pitching2019 %&gt;% mutate(Year = 2019) %&gt;% filter(Pos==\"SP\"|Pos==\"RP\")\n\n# Filter on top 15 rank\nbatting2019 &lt;- batting2019 %&gt;% mutate(Year = 2019) %&gt;% filter(Rk &lt;= 15)\n\n# Filter on only SP and RP\npitching2023 &lt;- pitching2023 %&gt;% mutate(Year = 2023) %&gt;% filter(Pos==\"SP\"|Pos==\"RP\")\n\n# Filter on top 15 rank\nbatting2023 &lt;- batting2023 %&gt;% mutate(Year = 2023) %&gt;% filter(Rk &lt;= 15)\n\n# Combine the pitching datasets\ncombined_pitching &lt;- rbind(pitching2019, pitching2023)\n\n# Combine the batting datasets\ncombined_batting &lt;- rbind(batting2019, batting2023)\n\n# Drop Inf for ERA col in 'combined_pitching'\ncombined_pitching &lt;- combined_pitching[is.finite(combined_pitching$ERA), ]\n\n# Print the first few rows of the combined data to confirm it's combined correctly\n# head(combined_pitching)\n# head(combined_batting)\n\n\n# Calculate the mean of the provided pitching stats for the team\n# We first calculate the means of the statistics for the team\nteam_stats_2019 &lt;- pitching2019 %&gt;%\n  summarise(ERA = mean(ERA, na.rm = TRUE),\n            WHIP = mean(WHIP, na.rm = TRUE),\n            SO9 = mean(SO9, na.rm = TRUE),\n            FIP = mean(FIP, na.rm = TRUE),\n            H = mean(H, na.rm = TRUE),\n            R = mean(R, na.rm = TRUE))\n\ncategories &lt;- c(\"ERA\", \"WHIP\", \"SO9\", \"FIP\", \"H\", \"R\",\"ERA\")\n\nmax_values &lt;- c(ERA = max(combined_pitching$ERA), WHIP = max(combined_pitching$WHIP), SO9 = max(combined_pitching$SO9), FIP = max(combined_pitching$FIP), H = max(combined_pitching$H), R = max(combined_pitching$R)) # Upper limit of poor performance\nmin_values &lt;- c(ERA = min(combined_pitching$ERA), WHIP = min(combined_pitching$WHIP), SO9 = min(combined_pitching$SO9), FIP = min(combined_pitching$FIP), H = min(combined_pitching$H), R = min(combined_pitching$R)) # Lower limit of good performance\n\n# Normalize the stats (Lower is better for ERA, WHIP, FIP, H, and R; higher is better for SO9)\n# For ERA, WHIP, FIP, H, R we subtract from the max value to invert the scale\nteam_stats_normalized_2019 &lt;- mutate(team_stats_2019,\n                                     ERA = (max_values['ERA'] - ERA) / (max_values['ERA'] - min_values['ERA']),\n                                     WHIP = (max_values['WHIP'] - WHIP) / (max_values['WHIP'] - min_values['WHIP']),\n                                     SO9 = (SO9-min_values['SO9']) / (max_values['SO9'] - min_values['SO9']),\n                                     FIP = (max_values['FIP'] - FIP) / (max_values['FIP'] - min_values['FIP']),\n                                     H = (max_values['H'] - H) / (max_values['H'] - min_values['H']),\n                                     R = (max_values['R'] - R) / (max_values['R'] - min_values['R']))\n\nvalues_2019 &lt;- c(team_stats_normalized_2019$ERA, team_stats_normalized_2019$WHIP, team_stats_normalized_2019$SO9,\n                 team_stats_normalized_2019$FIP, team_stats_normalized_2019$H, team_stats_normalized_2019$R)\nvalues_2019 &lt;- c(values_2019, values_2019[1]) # Add the first value to the end to close the radar chart\n\nteam_stats_2023 &lt;- pitching2023 %&gt;%\n  summarise(ERA = mean(ERA, na.rm = TRUE),\n            WHIP = mean(WHIP, na.rm = TRUE),\n            SO9 = mean(SO9, na.rm = TRUE),\n            FIP = mean(FIP, na.rm = TRUE),\n            H = mean(H, na.rm = TRUE),\n            R = mean(R, na.rm = TRUE))\n\ncategories &lt;- c(\"ERA\", \"WHIP\", \"SO9\", \"FIP\", \"H\", \"R\",\"ERA\")\n\nmax_values &lt;- c(ERA = max(combined_pitching$ERA), WHIP = max(combined_pitching$WHIP), SO9 = max(combined_pitching$SO9), FIP = max(combined_pitching$FIP), H = max(combined_pitching$H), R = max(combined_pitching$R)) # Upper limit of poor performance\nmin_values &lt;- c(ERA = min(combined_pitching$ERA), WHIP = min(combined_pitching$WHIP), SO9 = min(combined_pitching$SO9), FIP = min(combined_pitching$FIP), H = min(combined_pitching$H), R = min(combined_pitching$R)) # Lower limit of good performance\n\n# Normalize the stats (Lower is better for ERA, WHIP, FIP, H, and R; higher is better for SO9)\n# For ERA, WHIP, FIP, H, R we subtract from the max value to invert the scale\nteam_stats_normalized_2023 &lt;- mutate(team_stats_2023,\n                                     ERA = (max_values['ERA'] - ERA) / (max_values['ERA'] - min_values['ERA']),\n                                     WHIP = (max_values['WHIP'] - WHIP) / (max_values['WHIP'] - min_values['WHIP']),\n                                     SO9 = (SO9-min_values['SO9']) / (max_values['SO9'] - min_values['SO9']),\n                                     FIP = (max_values['FIP'] - FIP) / (max_values['FIP'] - min_values['FIP']),\n                                     H = (max_values['H'] - H) / (max_values['H'] - min_values['H']),\n                                     R = (max_values['R'] - R) / (max_values['R'] - min_values['R']))\n\nvalues_2023 &lt;- c(team_stats_normalized_2023$ERA, team_stats_normalized_2023$WHIP, team_stats_normalized_2023$SO9,\n                 team_stats_normalized_2023$FIP, team_stats_normalized_2023$H, team_stats_normalized_2023$R)\nvalues_2023 &lt;- c(values_2023, values_2023[1]) # Add the first value to the end to close the radar chart\n\n\n# Define the batting statistics we are interested in\nbatting_stats &lt;- c(\"BA\", \"OBP\", \"SLG\", \"OPS\", \"OPS+\", \"HR\")\n\n# Calculate the mean for each batting statistic for 2019 and 2023 separately\nbatting_stats_2019 &lt;- combined_batting %&gt;%\n  filter(Year == 2019) %&gt;%\n  summarise(across(all_of(batting_stats), mean, na.rm = TRUE))\n\nbatting_stats_2023 &lt;- combined_batting %&gt;%\n  filter(Year == 2023) %&gt;%\n  summarise(across(all_of(batting_stats), mean, na.rm = TRUE))\n\n# Calculate max and min values for normalization from the combined dataset\nmax_values_batting &lt;- sapply(combined_batting[, batting_stats], max, na.rm = TRUE)\nmin_values_batting &lt;- sapply(combined_batting[, batting_stats], min, na.rm = TRUE)\n\n# Normalize the stats for each year\nnormalized_batting_2019 &lt;- as.data.frame(mapply(function(x, min, max) (x - min) / (max - min), batting_stats_2019, min_values_batting, max_values_batting))\nnormalized_batting_2023 &lt;- as.data.frame(mapply(function(x, min, max) (x - min) / (max - min), batting_stats_2023, min_values_batting, max_values_batting))\n\n# Add the first statistic at the end to close the radar chart loop\nvalues_2019 &lt;- unlist(normalized_batting_2019)\nvalues_2019 &lt;- c(values_2019, values_2019[1]) # Add the first value to the end to close the radar chart\n\nvalues_2023 &lt;- unlist(normalized_batting_2023)\nvalues_2023 &lt;- c(values_2023, values_2023[1]) # Add the first value to the end to close the radar chart\n\ncategories &lt;- c(batting_stats, batting_stats[1]) # Add the first category to the end to close the loop\n\n# Create the original values\nvalues_2019_org &lt;- unlist(batting_stats_2019)\nvalues_2019_org &lt;- c(values_2019_org, values_2019_org[1]) # Add the first value to the end to close the radar chart\n\nvalues_2023_org &lt;- unlist(batting_stats_2023)\nvalues_2023_org &lt;- c(values_2023_org, values_2023_org[1]) # Add the first value to the end to close the radar chart\n\n# Create a radar chart in plotly with both 2019 and 2023 data\np2 &lt;- plot_ly() %&gt;%\n  add_trace(\n    type = 'scatterpolar',\n    mode = 'markers+lines',\n    fill = 'toself',\n    r = values_2019,\n    theta = categories,\n    fillcolor = 'rgba(255, 0, 0, 0.5)',\n    line = list(color = 'rgba(255, 0, 0, 0.5)'),\n    hoverinfo='text',\n    hovertext= ~paste(\"2019\",\"&lt;br&gt;Stat:\",categories,\"&lt;br&gt;Original Value:\", round(values_2019_org,3)),\n    name = '2019'\n  ) %&gt;%\n  add_trace(\n    type = 'scatterpolar',\n    mode = 'markers+lines',\n    fill = 'toself',\n    r = values_2023,\n    theta = categories,\n    fillcolor = 'rgba(0, 0, 255, 0.5)',\n    line = list(color = 'rgba(0, 0, 255, 0.5)'),\n    hoverinfo='text',\n    hovertext= ~paste(\"2023\",\"&lt;br&gt;Stat:\",categories,\"&lt;br&gt;Original Value:\", round(values_2023_org,3)),\n    name = '2023'\n  ) %&gt;%\n  layout(\n    polar = list(\n      radialaxis = list(\n        visible = TRUE,\n        range = c(0, 1)\n      )\n    ),\n    showlegend = TRUE,\n    title = \"Team Batting Stats Radar Chart (2019 vs 2023)\"\n  )\n\n# Print the plot\np2\n\n\n\n\nFigure 9: The radar chart offers a side-by-side comparison of the Washington Nationals’ offensive performance using batting statistics from the 2019 and 2023 seasons. The 2019 batting achievements are represented by the pink region, while the purple region depicts the 2023 outcomes. After normalizing the data, it is evident that the team’s batting metrics in 2019 surpassed those in 2023 across all six key metrics. Specifically, the 2019 season shows higher values in SLG, OBP, BA, and OPS, suggesting a more potent offensive lineup capable of more effective hitting and run production. Additionally, the HR metric, which indicates power-hitting prowess, was also greater in 2019. The OPS+ values, which adjust for league and park variations, are relatively similar for both years, suggesting that when accounting for external factors, the team’s offensive efficiency has not significantly deviated from league norms. Data sources: https://www.baseball-reference.com/teams/WSN/2023.shtml#all_team_batting and https://www.baseball-reference.com/teams/WSN/2019.shtml#all_team_batting.\n\n\n\nSLG: Slugging Percentage\nOBP: On-Base Percentage\nBA: Batting Average\nHR: Home Runs\nOPS: On-base Plus Slugging\nOPS+: Adjusted On-base Plus Slugging (normalized across the league, with 100 being the average)\n\nThe Nat’s batting performance has shown a marked decline in 2023, as evidenced by the significant gaps in all six metrics compared between 2019 and 2023. This downturn suggests a need for a thorough examination of individual batters’ abilities to pinpoint the factors contributing to the stark decrease in batting effectiveness. Understanding the underlying issues, such as changes in player composition, injuries, or shifts in batting strategy, is crucial. This analysis will help identify specific areas for improvement and develop strategies to enhance overall performance, ensuring the team’s offensive capabilities are optimized in future seasons.\n\n\nCode\nlibrary(tidyverse)\nlibrary(ggplot2)\n\nbatting_2019 &lt;- read.csv('../data/player_batting_2019.csv')\nbatting_2023 &lt;- read.csv('../data/player_batting_2023.csv')\n\ndf_2019 &lt;- batting_2019 %&gt;%\n  filter(Tm=='WSN')%&gt;%\n  select(Name,Tm,PA,BA,OBP,OPS.,SLG,H.)%&gt;%\n  arrange(desc(H.))%&gt;%\n  na.omit()%&gt;%\n  slice_head(n=20)\n\ndf_2023 &lt;- batting_2023 %&gt;%\n  filter(Tm =='WSN')%&gt;%\n  select(Name,Tm,PA,BA,OBP,OPS.,SLG,H)%&gt;%\n  arrange(desc(H))%&gt;%\n  na.omit()%&gt;%\n  slice_head(n=20)\n\ndf_2019_norm &lt;- df_2019 %&gt;%\n  mutate(across(.cols = c(BA,OBP,OPS.,SLG,H.), \n                .fns = ~ (. - min(.)) / (max(.) - min(.))))\n\n\ndf_2023_norm &lt;- df_2023 %&gt;%\n  mutate(across(.cols = c(BA,OBP,OPS.,SLG,H), \n                .fns = ~ (. - min(.)) / (max(.) - min(.))))\n\n\nlibrary(plotly)\n\ntheta_labels= c('Batting Average', 'On-base percentage','On-base Plus Slugging Plus','Slugging','Hits')\n\nfig &lt;- plot_ly(\n  type = 'scatterpolar',\n  fill = 'toself'\n) \nfig &lt;- fig %&gt;%\n  add_trace(\n    r = unlist(as.numeric(df_2019_norm[1,4:8])),\n    theta = theta_labels,\n    fillcolor = 'rgba(255, 0, 0, 0.3)',\n    line = list(color = 'rgba(255, 0, 0, 0.5)'),\n    hoverinfo='text',\n    hovertext = ~paste(\"2019\",\"&lt;br&gt;Name:\",df_2019$Name[1], \"&lt;br&gt;Stat:\",colnames(df_2023[4:8]), c(df_2019[1,4:8])),\n    name = '2019'\n  ) \nfig &lt;- fig %&gt;%\n  add_trace(\n    r = unlist(as.numeric(df_2023_norm[1,4:8])),\n    theta = theta_labels,\n    fillcolor = 'rgba(0, 0, 255, 0.3)',\n    line = list(color = 'rgba(0, 0, 255, 0.5)'),\n    hoverinfo='text',\n    hovertext= ~paste(\"2023\",\"&lt;br&gt;Name:\",df_2023$Name[1],\"&lt;br&gt;Stat:\",colnames(df_2023[4:8]), c(df_2023[1,4:8])),\n    name = '2023'\n  ) \n\nfig &lt;- fig %&gt;%\n  add_trace(\n    r = unlist(as.numeric(df_2019_norm[2,4:8])),\n    theta = theta_labels,\n    fillcolor = 'rgba(255, 0, 0, 0.3)',\n    line = list(color = 'rgba(255, 0, 0, 0.5)'),\n    hoverinfo='text',\n    hovertext= ~paste(\"2019\",\"&lt;br&gt;Name:\",df_2019$Name[2],\"&lt;br&gt;Stat:\",colnames(df_2019[4:8]), c(df_2019[2,4:8])),\n    name = '2019',\n    visible=F\n  )\n\nfig &lt;- fig %&gt;%\n  add_trace(\n    r = unlist(as.numeric(df_2023_norm[2,4:8])),\n    theta = theta_labels,\n    fillcolor = 'rgba(0, 0, 255, 0.3)',\n    line = list(color = 'rgba(0, 0, 255, 0.5)'),\n    hoverinfo='text',\n    hovertext=paste(\"2023\",\"&lt;br&gt;Name:\",df_2023$Name[2],\"&lt;br&gt;Stat:\",colnames(df_2023[4:8]), c(df_2023[2,4:8])),\n    name = '2023',\n    visible=F\n  ) \n\nfig &lt;- fig %&gt;%\n  add_trace(\n    r = unlist(as.numeric(df_2019_norm[3,4:8])),\n    theta = theta_labels,\n    fillcolor = 'rgba(255, 0, 0, 0.3)',\n    line = list(color = 'rgba(255, 0, 0, 0.5)'),\n    hoverinfo='text',\n    hovertext=paste(\"2019\",\"&lt;br&gt;Name:\",df_2019$Name[3],\"&lt;br&gt;Stat:\",colnames(df_2019[4:8]), c(df_2019[3,4:8])),\n    name = '2019',\n    visible=F\n  )\n\nfig &lt;- fig %&gt;%\n  add_trace(\n    r = unlist(as.numeric(df_2023_norm[3,4:8])),\n    theta = theta_labels,\n    fillcolor = 'rgba(0, 0, 255, 0.3)',\n    line = list(color = 'rgba(0, 0, 255, 0.5)'),\n    hoverinfo='text',\n    hovertext=paste(\"2023\",\"&lt;br&gt;Name:\",df_2023$Name[3],\"&lt;br&gt;Stat:\",colnames(df_2023[4:8]),c(df_2023[3,4:8])),\n    name = '2023',\n    visible=F\n  )\n\nfig &lt;- fig %&gt;%\n  add_trace(\n    r = unlist(as.numeric(df_2019_norm[4,4:8])),\n    theta = theta_labels,\n    fillcolor = 'rgba(255, 0, 0, 0.3)',\n    line = list(color = 'rgba(255, 0, 0, 0.5)'),\n    hoverinfo='text',\n    hovertext=paste(\"2019\",\"&lt;br&gt;Name:\",df_2019$Name[4],\"&lt;br&gt;Stat:\",colnames(df_2019[4:8]), c(df_2019[4,4:8])),\n    name = '2019',\n    visible=F\n  )\n\nfig &lt;- fig %&gt;%\n  add_trace(\n    r = unlist(as.numeric(df_2023_norm[4,4:8])),\n    theta = theta_labels,\n    fillcolor = 'rgba(0, 0, 255, 0.3)',\n    line = list(color = 'rgba(0, 0, 255, 0.5)'),\n    hoverinfo='text',\n    hovertext=paste(\"2023\",\"&lt;br&gt;Name:\",df_2023$Name[4],\"&lt;br&gt;Stat:\",colnames(df_2023[4:8]), c(df_2023[4,4:8])),\n    name = '2023',\n    visible=F\n  )\n\nfig &lt;- fig %&gt;%\n  add_trace(\n    r = unlist(as.numeric(df_2019_norm[5,4:8])),\n    theta = theta_labels,\n    fillcolor = 'rgba(255, 0, 0, 0.3)',\n    line = list(color = 'rgba(255, 0, 0, 0.5)'),\n    hoverinfo='text',\n    hovertext=paste(\"2019\",\"&lt;br&gt;Name:\",df_2019$Name[5],\"&lt;br&gt;Stat:\",colnames(df_2019[4:8]), c(df_2019[5,4:8])),\n    name = '2019',\n    visible=F\n  )\n\nfig &lt;- fig %&gt;%\n  add_trace(\n    r = unlist(as.numeric(df_2023_norm[5,4:8])),\n    theta = theta_labels,\n    fillcolor = 'rgba(0, 0, 255, 0.3)',\n    line = list(color = 'rgba(0, 0, 255, 0.5)'),\n    hoverinfo='text',\n    hovertext=paste(\"2023\",\"&lt;br&gt;Name:\",df_2023$Name[5],\"&lt;br&gt;Stat:\",colnames(df_2023[4:8]),c(df_2023[5,4:8])),\n    name = '2023',\n    visible=F\n  )\n\nfig &lt;- fig %&gt;%\n  layout(\n    polar = list(\n      radialaxis = list(\n        range = c(0,1)\n      )\n    )\n  )\n\n\nfinal_plot &lt;- fig %&gt;% layout(\n  title = 'Washington Nationals Top 5 Batters 2019 vs 2023',\n  updatemenus = list(\n    list(\n      type = 'buttons',\n      direction = 'left',\n      x = 0,\n      xanchor = 'left',\n      y = -0.2,\n      yanchor = 'top',\n      buttons = list(\n        list(method = 'update', args = list(list(visible = c(T, T, T, F, F, F,F, F,F, F,F)), list(title = 'Batter 1')), label = '1st Batter'),\n        list(method = 'update', args = list(list(visible = c(T,F, F, T, T, F,F, F,F, F,F)), list(title = 'Batter 2')), label = '2nd Batter'),\n        list(method = 'update', args = list(list(visible = c(T,F, F, F, F, T,T, F,F, F,F)), list(title = 'Batter 3')), label = '3rd Batter'),\n        list(method = 'update', args = list(list(visible = c(T,F, F, F, F, F,F, T,T, F,F)), list(title = 'Batter 4')), label = '4th Batter'),\n        list(method = 'update', args = list(list(visible = c(T,F, F, F, F, F,F, F,F, T,T)), list(title = 'Batter 5')), label = '5th Batter')\n      )\n    )\n  )\n)\n\nfinal_plot\n\n\n\n\nFigure 10: Radar chart for top 5 batting players from the 2019 Nats and 2023 Nats. The radar plot contains 5 major individual aspect of batters: ‘Batting Average’, ‘On-base percentage’,‘On-base Plus Slugging Plus’,‘Slugging’,‘Hits’. The Batter statistics data is obtained from https://www.baseball-reference.com/leagues/majors/2019-standard-batting.shtml.\n\n\nThis comparison highlights an intriguing contrast in batters performance between 2023 and 2019. 4 out of top 5 batter from 2023 has slightly weaker performance comparing to batters in 2019. However, when we compare the individual statistics with the team statistics, we can see the gap on performance are larger for team statistics, indicates more batting improvement needed for rotation players.",
    "crumbs": [
      "Project Summary"
    ]
  },
  {
    "objectID": "project_summary.html#injury-analysis-2023-team-level",
    "href": "project_summary.html#injury-analysis-2023-team-level",
    "title": "Bring the Washington Nationals Back to MLB Championship Contention",
    "section": "Injury Analysis: 2023 Team Level",
    "text": "Injury Analysis: 2023 Team Level\n\n\nCode\nreticulate::use_condaenv(\"dsan5400\", required = TRUE)\n\n\n\n\n                        \n                                            \nFigure 11: Injury Timeline of the 2023 Washington Nationals: This bar graph presents an overview of the injuries sustained by the team across different positions during the 2023 season. Each bar represents the time frame a player was sidelined due to injury, offering insights into how the absence of key players, especially starting pitchers like Stephen Strasburg and relief pitchers like Tanner Rainey, has correlated with the team’s struggles. The visual highlights the critical periods where multiple injuries overlapped, further exacerbating the team’s challenges. This 2023 injury data is obtained from the source https://www.fangraphs.com/roster-resource/injury-report/nationals?timeframe=all&season=2023.\n\n\nInjury is also a critical aspect to consider when evaluating a team’s performance, as it significantly influences team dynamics and strategy. An analysis was conducted on the impact of injuries on team performance through the development of a bar graph that details the injury timelines of each player. This graph tracks the start and expected recovery periods of injuries, providing clear insights into the availability of key players.\nTo specifically understand the impact of injuries on the Washington Nationals, an interactive bar graph was developed. This graph allows for the tracking of the start and expected recovery periods of injuries, offering clear insights into the availability of key players. A notable example from the analysis is Stephen Strasburg, the 2019 MVP. The chart reveals that Strasburg sustained an injury in 2021 and was not expected to return until the end of May 2023. Furthermore, he did not participate in any games in 2023. His absence was likely a significant factor in the team’s downturn that year, particularly given his outstanding performance in 2019. Additionally, the analysis examined periods where multiple injuries overlapped, which further exacerbated the team’s challenges. This analysis underscores a broader trend: the health of the players directly correlates with the ability to replicate the success of a championship season.",
    "crumbs": [
      "Project Summary"
    ]
  },
  {
    "objectID": "project_summary.html#proposed-strategies",
    "href": "project_summary.html#proposed-strategies",
    "title": "Bring the Washington Nationals Back to MLB Championship Contention",
    "section": "Proposed Strategies",
    "text": "Proposed Strategies\n\nOperation & Management\n\nInvest More in the Fans. Provide more souvenirs or free team merchandise during the games to boost attendance. Create a better soundtrack during the game to increase fan engagement. This could help create a more harsh environment for the away team, enhancing the Pitcher’s Park Factor and Batter’s Park Factor.\nSign Star Batters. A good pitcher guarantees a strong defensive team performance, but fans generally prefer better offense. They want to see home runs. It’s necessary to maintain a balance between pitchers and batters on the payroll to attract more audience.\n\n\n\nTeam & Players Improvement\n\nPitching Control. Choose pitchers with better pitching control to reduce the Walks + Hits per inning (WHIP) and select pitchers with higher Fielding Independent Pitching (FIP) statistics.\nImprove Batting. All six aspects require improvements to return to championship levels. Investing more money in signing talented batters is essential. This strategy will enhance the team’s offensive capabilities and contribute significantly to overall success.\n\n\n\nOthers\n\nInjuries. Adjust the game plan to help players stay healthy. Consistent game attendance is key to leading a successful season. By ensuring players are in peak physical condition, the team can maintain a high level of performance throughout the season, ultimately increasing their chances of success.",
    "crumbs": [
      "Project Summary"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Data Visualization Project: Washington Nationals Analysis",
    "section": "",
    "text": "The Washington Nationals is a professional baseball team that competes in Major League Baseball (MLB). Located in Washington, D.C., the team plays its home games at Nationals Park. Back in 2019, the Washington Nationals made a surprising run in the playoffs, culminating in a victory at the World Series and securing their first MLB championship in franchise history. Let’s relive that exciting experience in the following video.\n\nAfter years affected by COVID and several rebuilding seasons, the Washington Nationals have become a mediocre team within five years. They are consistently ranked as one of the bottom teams in their conference. What has changed during this period? The goal of this project is to use interactive visualization tools along with informative narratives to help the audience understand some team-level changes using a data-driven approach.\nOur team has investigated various operational, offensive, and defensive statistics for the Washington Nationals and conducted extensive side-by-side comparisons to explore the differences or changes between 2019 and 2023. The final results are described in the ‘Project Summary’ tab, where the audience can view a detailed proposal for this project. The objective of this project is to use data visualization tools to tell a compelling story to the audience, relating to team management improvement strategies that could potentially elevate the Washington Nationals back to championship contention.",
    "crumbs": [
      "Research Background"
    ]
  },
  {
    "objectID": "index.html#introduction",
    "href": "index.html#introduction",
    "title": "Data Visualization Project: Washington Nationals Analysis",
    "section": "",
    "text": "The Washington Nationals is a professional baseball team that competes in Major League Baseball (MLB). Located in Washington, D.C., the team plays its home games at Nationals Park. Back in 2019, the Washington Nationals made a surprising run in the playoffs, culminating in a victory at the World Series and securing their first MLB championship in franchise history. Let’s relive that exciting experience in the following video.\n\nAfter years affected by COVID and several rebuilding seasons, the Washington Nationals have become a mediocre team within five years. They are consistently ranked as one of the bottom teams in their conference. What has changed during this period? The goal of this project is to use interactive visualization tools along with informative narratives to help the audience understand some team-level changes using a data-driven approach.\nOur team has investigated various operational, offensive, and defensive statistics for the Washington Nationals and conducted extensive side-by-side comparisons to explore the differences or changes between 2019 and 2023. The final results are described in the ‘Project Summary’ tab, where the audience can view a detailed proposal for this project. The objective of this project is to use data visualization tools to tell a compelling story to the audience, relating to team management improvement strategies that could potentially elevate the Washington Nationals back to championship contention.",
    "crumbs": [
      "Research Background"
    ]
  },
  {
    "objectID": "index.html#research-questions",
    "href": "index.html#research-questions",
    "title": "Data Visualization Project: Washington Nationals Analysis",
    "section": "Research Questions",
    "text": "Research Questions\n\nTeam-Level Performance\n⚾ How did the changes in team composition between 2019 and 2023 affect the Washington Nationals’ performance in key statistical areas such as ERA, batting average, and fielding percentage?\n⚾ What were the significant differences in team strategy and outcomes in the 2019 and 2023 seasons, and how did these impact overall success?\n⚾ How did the performance metrics during the regular season of 2019 compare to those in 2023, and what factors contributed to any observed variances?\n\n\nIndividual Player Analysis\n⚾ Which players showed the most significant improvement or decline in performance between the 2019 and 2023 seasons in terms of OPS, batting average, and home runs?\n⚾ How did the performance of key players in 2019 influence the outcomes of crucial games compared to those in 2023?\n⚾ Identify the players whose performance metrics significantly diverged from their career averages during these years. What might explain these variances?\n⚾ How did aging affect the performance of players who were active in both the 2019 and 2023 seasons?\n\n\nOther Aspects:\n\nInjury Analysis\n⚾ What were the most common injuries for the Nationals’ roster in 2019 versus 2023, and how did these injuries impact team performance metrics?\n⚾ Analysis of recovery times: Were players able to return to their pre-injury performance levels after injuries in 2019 and 2023?\n⚾ Did injury rates in 2019 and 2023 correlate with specific game or practice conditions, such as increased game density or changes in training regimen?\n⚾ How did the absence of key players due to injuries in these specific seasons affect the strategic decisions and game outcomes for the Nationals?\n\n\nPayroll and Attendance Analysis\n⚾ How did the Washington Nationals’ payroll changes between 2019 and 2023 correlate with the team’s performance?\n⚾ How did fluctuations in fan attendance correlate with the team’s performance metrics in the 2019 and 2023 seasons?\n\n\n\n\n\n\nData, Code and Image Source\n\n\n\n\nAll the data is saved in the data folder on the GitHub repository, with a link pointing to it through the ‘Data’ tab. Data is primarily collected from ‘https://www.baseball-reference.com’ and ‘https://baseballsavant.mlb.com/’. Additional data has also been collected to support further analysis. All data sources used are cited in the figure captions in the ‘Project Summary’ tab.\nMost of the code is constructed in R using the Plotly library for interactive functionality. The last injury chart is coded in Python. Details of the code can be referred to in the GitHub repository using the ‘Code’ tab on the left.\nGithub Page: https://github.com/Sel272/Selena-Data-Visualization-Project.\nThe Washington Nationals logo image is obtained from ‘https://mrwallpaper.com/wallpapers/washington-nationals-team-screen-9i46cks6esmwu8ig.html’. The bottom image is obtained from ‘https://wallpapers.com/wallpapers/washington-nationals-wood-grain-gqs0nshw7dsn8j8z.html’.\n\n\n\n\n\n\nWashington Nationals",
    "crumbs": [
      "Research Background"
    ]
  }
]