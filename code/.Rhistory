)
fig <- fig %>%
add_trace(
r = unlist(as.numeric(df_2019_norm[3,4:8])),
theta = theta_labels,
fillcolor = 'rgba(255, 0, 0, 0.3)',
line = list(color = 'rgba(255, 0, 0, 0.5)'),
hoverinfo='text',
hovertext=paste("2019","<br>Name:",df_2019$Name[3],"<br>Stat:",colnames(df_2019[4:8]), c(df_2019[3,4:8])),
name = '2019',
visible=F
)
fig <- fig %>%
add_trace(
r = unlist(as.numeric(df_2023_norm[3,4:8])),
theta = theta_labels,
fillcolor = 'rgba(0, 0, 255, 0.3)',
line = list(color = 'rgba(0, 0, 255, 0.5)'),
hoverinfo='text',
hovertext=paste("2023","<br>Name:",df_2023$Name[3],"<br>Stat:",colnames(df_2023[4:8]),c(df_2023[3,4:8])),
name = '2023',
visible=F
)
fig <- fig %>%
add_trace(
r = unlist(as.numeric(df_2019_norm[4,4:8])),
theta = theta_labels,
fillcolor = 'rgba(255, 0, 0, 0.3)',
line = list(color = 'rgba(255, 0, 0, 0.5)'),
hoverinfo='text',
hovertext=paste("2019","<br>Name:",df_2019$Name[4],"<br>Stat:",colnames(df_2019[4:8]), c(df_2019[4,4:8])),
name = '2019',
visible=F
)
fig <- fig %>%
add_trace(
r = unlist(as.numeric(df_2023_norm[4,4:8])),
theta = theta_labels,
fillcolor = 'rgba(0, 0, 255, 0.3)',
line = list(color = 'rgba(0, 0, 255, 0.5)'),
hoverinfo='text',
hovertext=paste("2023","<br>Name:",df_2023$Name[4],"<br>Stat:",colnames(df_2023[4:8]), c(df_2023[4,4:8])),
name = '2023',
visible=F
)
fig <- fig %>%
add_trace(
r = unlist(as.numeric(df_2019_norm[5,4:8])),
theta = theta_labels,
fillcolor = 'rgba(255, 0, 0, 0.3)',
line = list(color = 'rgba(255, 0, 0, 0.5)'),
hoverinfo='text',
hovertext=paste("2019","<br>Name:",df_2019$Name[5],"<br>Stat:",colnames(df_2019[4:8]), c(df_2019[5,4:8])),
name = '2019',
visible=F
)
fig <- fig %>%
add_trace(
r = unlist(as.numeric(df_2023_norm[5,4:8])),
theta = theta_labels,
fillcolor = 'rgba(0, 0, 255, 0.3)',
line = list(color = 'rgba(0, 0, 255, 0.5)'),
hoverinfo='text',
hovertext=paste("2023","<br>Name:",df_2023$Name[5],"<br>Stat:",colnames(df_2023[4:8]),c(df_2023[5,4:8])),
name = '2023',
visible=F
)
fig <- fig %>%
layout(
polar = list(
radialaxis = list(
range = c(0,1)
)
)
)
final_plot <- fig %>% layout(
title = 'Washington Nationals Top 5 Batters 2019 vs 2023',
updatemenus = list(
list(
type = 'buttons',
direction = 'left',
x = 0,
xanchor = 'left',
y = -0.2,
yanchor = 'top',
buttons = list(
list(method = 'update', args = list(list(visible = c(T, T, T, F, F, F,F, F,F, F,F)), list(title = 'Batter 1')), label = '1st Batter'),
list(method = 'update', args = list(list(visible = c(T,F, F, T, T, F,F, F,F, F,F)), list(title = 'Batter 2')), label = '2nd Batter'),
list(method = 'update', args = list(list(visible = c(T,F, F, F, F, T,T, F,F, F,F)), list(title = 'Batter 3')), label = '3rd Batter'),
list(method = 'update', args = list(list(visible = c(T,F, F, F, F, F,F, T,T, F,F)), list(title = 'Batter 4')), label = '4th Batter'),
list(method = 'update', args = list(list(visible = c(T,F, F, F, F, F,F, F,F, T,T)), list(title = 'Batter 5')), label = '5th Batter')
)
)
)
)
final_plot
View(df_2019)
View(df_2019)
library(tidyverse)
# Load the data
stadium <- read_csv("Nationals_Stadium_Stats.csv")
# https://www.baseball-reference.com/teams/WSN/attend.shtml
# Drop year 2020 due to the Covid impact
stadium <- stadium %>% filter (Year!=2020 & Year!=2024)
# Convert 'Est. Payroll' to numeric after removing commas and dollar signs
stadium$`Est. Payroll` <- as.numeric(gsub("[,$]", "", stadium$`Est. Payroll`))
library(readxl)
# read the revenue related file
# Get the names of all sheets in the Excel file
sheets1 <- excel_sheets("statistic_id203506_washington-nationals-average-ticket-price-2006-2023.xlsx")
# Read the second tab (assuming its name is stored in the variable 'sheet_name')
ticket <- read_excel("statistic_id203506_washington-nationals-average-ticket-price-2006-2023.xlsx", sheet = sheets1[2])
# Drop the unused rows
ticket <- ticket %>% na.omit()
# Replace column names
names(ticket) <- c('Year','Ticket Price')
# Remove year 2020 due to Covid impact and the additional years outside 2008 to 2023 to match the time scale
ticket <- ticket %>% filter (Year!=2020 & Year >= 2008 ) %>% mutate(Year = as.numeric(Year))
# Join the ticket price column to the stadium dataset
stadium_combined <- stadium %>% left_join(ticket,by='Year')
library(readxl)
# read the revenue related file
# Get the names of all sheets in the Excel file
sheets2 <- excel_sheets("statistic_id196692_washington-nationals-revenue-2001-2022.xlsx")
# Read the second tab (assuming its name is stored in the variable 'sheet_name')
revenue <- read_excel("statistic_id196692_washington-nationals-revenue-2001-2022.xlsx", sheet = sheets2[2])
# Drop the unused rows
revenue <- revenue %>% na.omit()
# Replace column names
names(revenue) <- c('Year','Revenue')
# Remove year 2020 due to Covid impact and the additional years outside 2008 to 2023 to match the time scale
revenue <- revenue %>% filter (Year!=2020 & Year >= 2008 ) %>% mutate(Year = as.numeric(Year))
# Join the revenue column to the stadium dataset
stadium_final <- stadium_combined %>% left_join(revenue,by='Year')
library(plotly)
library(dplyr)
# Assuming stadium_final is your data frame and it contains Year, Attendance, Est. Payroll, Ticket Price, Revenue, PPF, BPF
# Create a base plot with hover text
p <- plot_ly(stadium_final, x = ~Year, y = ~Attendance, type = 'scatter', mode = 'lines+markers', name = 'Attendance',
text = ~paste("Year:", Year, "<br>Attendance:", Attendance), hoverinfo = 'text')
# Add other traces with their respective hover text
p <- p %>% add_trace(y = ~`Est. Payroll`, name = "Estimated Payroll", visible = F,
text = ~paste("Year:", Year, "<br>Payroll:", `Est. Payroll`), hoverinfo = 'text')
p <- p %>% add_trace(y = ~`Ticket Price`, name = "Average Ticket Price", visible = F,
text = ~paste("Year:", Year, "<br>Price:", `Ticket Price`), hoverinfo = 'text')
p <- p %>% add_trace(y = ~Revenue, name = "Revenue", visible = F,
text = ~paste("Year:", Year, "<br>Revenune in Millions:", Revenue), hoverinfo = 'text')
p <- p %>% add_trace(y = ~PPF, name = "Pitcher's Park Factor", visible = F,
text = ~paste("Year:", Year, "<br>Factor Value:", PPF), hoverinfo = 'text')
p <- p %>% add_trace(y = ~BPF, name = "Batter's Park Factor", visible = F,
text = ~paste("Year:", Year, "<br>Factor Value:", BPF), hoverinfo = 'text')
# Define layout and buttons for interactivity
final_plot <- p %>% layout(
title = 'Interactive Visualization of Washington Nationals Statistics',
xaxis = list(title = 'Year'),
yaxis = list(title = 'Value'),
updatemenus = list(
list(
type = 'buttons',
direction = 'left',
x = 0,
xanchor = 'left',
y = -0.2,
yanchor = 'top',
buttons = list(
list(method = 'update', args = list(list(visible = c(TRUE, FALSE, FALSE, FALSE, FALSE, FALSE)), list(title = 'Attendance')), label = 'Attendance'),
list(method = 'update', args = list(list(visible = c(FALSE, TRUE, FALSE, FALSE, FALSE, FALSE)), list(title = 'Estimated Payroll')), label = 'Payroll'),
list(method = 'update', args = list(list(visible = c(FALSE, FALSE, TRUE, FALSE, FALSE, FALSE)), list(title = 'Average Ticket Price')), label = 'Ticket Price'),
list(method = 'update', args = list(list(visible = c(FALSE, FALSE, FALSE, TRUE, FALSE, FALSE)), list(title = 'Revenue')), label = 'Revenue'),
list(method = 'update', args = list(list(visible = c(FALSE, FALSE, FALSE, FALSE, TRUE, FALSE)), list(title = 'Pitcher\'s Park Factor')), label = 'PPF'),
list(method = 'update', args = list(list(visible = c(FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), list(title = 'Batter\'s Park Factor')), label = 'BPF')
)
)
)
)
# Show the plot
final_plot
library(plotly)
library(dplyr)
# Assuming stadium_final is your data frame and it contains Year, Attendance, Est. Payroll, Ticket Price, Revenue, PPF, BPF
# Create a base plot with hover text
p <- plot_ly(stadium_final, x = ~Year, y = ~Attendance, type = 'scatter', mode = 'lines+markers', name = 'Attendance',
text = ~paste("Year:", Year, "<br>Attendance:", Attendance,format(BPF, big.mark = ",", scientific = FALSE)), hoverinfo = 'text')
# Add other traces with their respective hover text
p <- p %>% add_trace(y = ~`Est. Payroll`, name = "Estimated Payroll", visible = F,
text = ~paste("Year:", Year, "<br>Payroll:", `Est. Payroll`,format(BPF, big.mark = ",", scientific = FALSE)), hoverinfo = 'text')
p <- p %>% add_trace(y = ~`Ticket Price`, name = "Average Ticket Price", visible = F,
text = ~paste("Year:", Year, "<br>Price:", `Ticket Price`), hoverinfo = 'text')
p <- p %>% add_trace(y = ~Revenue, name = "Revenue", visible = F,
text = ~paste("Year:", Year, "<br>Revenune in Millions:", Revenue), hoverinfo = 'text')
p <- p %>% add_trace(y = ~PPF, name = "Pitcher's Park Factor", visible = F,
text = ~paste("Year:", Year, "<br>Factor Value:", PPF), hoverinfo = 'text')
p <- p %>% add_trace(y = ~BPF, name = "Batter's Park Factor", visible = F,
text = ~paste("Year:", Year, "<br>Factor Value:", BPF), hoverinfo = 'text')
# Define layout and buttons for interactivity
final_plot <- p %>% layout(
title = 'Interactive Visualization of Washington Nationals Statistics',
xaxis = list(title = 'Year'),
yaxis = list(title = 'Value'),
updatemenus = list(
list(
type = 'buttons',
direction = 'left',
x = 0,
xanchor = 'left',
y = -0.2,
yanchor = 'top',
buttons = list(
list(method = 'update', args = list(list(visible = c(TRUE, FALSE, FALSE, FALSE, FALSE, FALSE)), list(title = 'Attendance')), label = 'Attendance'),
list(method = 'update', args = list(list(visible = c(FALSE, TRUE, FALSE, FALSE, FALSE, FALSE)), list(title = 'Estimated Payroll')), label = 'Payroll'),
list(method = 'update', args = list(list(visible = c(FALSE, FALSE, TRUE, FALSE, FALSE, FALSE)), list(title = 'Average Ticket Price')), label = 'Ticket Price'),
list(method = 'update', args = list(list(visible = c(FALSE, FALSE, FALSE, TRUE, FALSE, FALSE)), list(title = 'Revenue')), label = 'Revenue'),
list(method = 'update', args = list(list(visible = c(FALSE, FALSE, FALSE, FALSE, TRUE, FALSE)), list(title = 'Pitcher\'s Park Factor')), label = 'PPF'),
list(method = 'update', args = list(list(visible = c(FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), list(title = 'Batter\'s Park Factor')), label = 'BPF')
)
)
)
)
# Show the plot
final_plot
library(plotly)
library(dplyr)
# Assuming stadium_final is your data frame and it contains Year, Attendance, Est. Payroll, Ticket Price, Revenue, PPF, BPF
# Create a base plot with hover text
p <- plot_ly(stadium_final, x = ~Year, y = ~Attendance, type = 'scatter', mode = 'lines+markers', name = 'Attendance',
text = ~paste("Year:", Year, "<br>Attendance:", format(Attendance, big.mark = ",", scientific = FALSE)), hoverinfo = 'text')
# Add other traces with their respective hover text
p <- p %>% add_trace(y = ~`Est. Payroll`, name = "Estimated Payroll", visible = F,
text = ~paste("Year:", Year, "<br>Payroll:", format(`Est. Payroll`, big.mark = ",", scientific = FALSE)), hoverinfo = 'text')
p <- p %>% add_trace(y = ~`Ticket Price`, name = "Average Ticket Price", visible = F,
text = ~paste("Year:", Year, "<br>Price:", `Ticket Price`), hoverinfo = 'text')
p <- p %>% add_trace(y = ~Revenue, name = "Revenue", visible = F,
text = ~paste("Year:", Year, "<br>Revenune in Millions:", Revenue), hoverinfo = 'text')
p <- p %>% add_trace(y = ~PPF, name = "Pitcher's Park Factor", visible = F,
text = ~paste("Year:", Year, "<br>Factor Value:", PPF), hoverinfo = 'text')
p <- p %>% add_trace(y = ~BPF, name = "Batter's Park Factor", visible = F,
text = ~paste("Year:", Year, "<br>Factor Value:", BPF), hoverinfo = 'text')
# Define layout and buttons for interactivity
final_plot <- p %>% layout(
title = 'Interactive Visualization of Washington Nationals Statistics',
xaxis = list(title = 'Year'),
yaxis = list(title = 'Value'),
updatemenus = list(
list(
type = 'buttons',
direction = 'left',
x = 0,
xanchor = 'left',
y = -0.2,
yanchor = 'top',
buttons = list(
list(method = 'update', args = list(list(visible = c(TRUE, FALSE, FALSE, FALSE, FALSE, FALSE)), list(title = 'Attendance')), label = 'Attendance'),
list(method = 'update', args = list(list(visible = c(FALSE, TRUE, FALSE, FALSE, FALSE, FALSE)), list(title = 'Estimated Payroll')), label = 'Payroll'),
list(method = 'update', args = list(list(visible = c(FALSE, FALSE, TRUE, FALSE, FALSE, FALSE)), list(title = 'Average Ticket Price')), label = 'Ticket Price'),
list(method = 'update', args = list(list(visible = c(FALSE, FALSE, FALSE, TRUE, FALSE, FALSE)), list(title = 'Revenue')), label = 'Revenue'),
list(method = 'update', args = list(list(visible = c(FALSE, FALSE, FALSE, FALSE, TRUE, FALSE)), list(title = 'Pitcher\'s Park Factor')), label = 'PPF'),
list(method = 'update', args = list(list(visible = c(FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), list(title = 'Batter\'s Park Factor')), label = 'BPF')
)
)
)
)
# Show the plot
final_plot
library(plotly)
library(dplyr)
# Assuming stadium_final is your data frame and it contains Year, Attendance, Est. Payroll, Ticket Price, Revenue, PPF, BPF
# Create a base plot with hover text
p <- plot_ly(stadium_final, x = ~Year, y = ~Attendance, type = 'scatter', mode = 'lines+markers', name = 'Attendance',
text = ~paste("Year:", Year, "<br>Attendance:", format(Attendance, big.mark = ",", scientific = FALSE)), hoverinfo = 'text')
# Add other traces with their respective hover text
p <- p %>% add_trace(y = ~`Est. Payroll`, name = "Estimated Payroll", visible = F,
text = ~paste("Year:", Year, "<br>Payroll:", format(`Est. Payroll`, big.mark = ",", scientific = FALSE)), hoverinfo = 'text')
p <- p %>% add_trace(y = ~`Ticket Price`, name = "Average Ticket Price", visible = F,
text = ~paste("Year:", Year, "<br>Price:$", `Ticket Price`), hoverinfo = 'text')
p <- p %>% add_trace(y = ~Revenue, name = "Revenue", visible = F,
text = ~paste("Year:", Year, "<br>Revenune in Millions:", Revenue), hoverinfo = 'text')
p <- p %>% add_trace(y = ~PPF, name = "Pitcher's Park Factor", visible = F,
text = ~paste("Year:", Year, "<br>Factor Value:", PPF), hoverinfo = 'text')
p <- p %>% add_trace(y = ~BPF, name = "Batter's Park Factor", visible = F,
text = ~paste("Year:", Year, "<br>Factor Value:", BPF), hoverinfo = 'text')
# Define layout and buttons for interactivity
final_plot <- p %>% layout(
title = 'Interactive Visualization of Washington Nationals Statistics',
xaxis = list(title = 'Year'),
yaxis = list(title = 'Value'),
updatemenus = list(
list(
type = 'buttons',
direction = 'left',
x = 0,
xanchor = 'left',
y = -0.2,
yanchor = 'top',
buttons = list(
list(method = 'update', args = list(list(visible = c(TRUE, FALSE, FALSE, FALSE, FALSE, FALSE)), list(title = 'Attendance')), label = 'Attendance'),
list(method = 'update', args = list(list(visible = c(FALSE, TRUE, FALSE, FALSE, FALSE, FALSE)), list(title = 'Estimated Payroll')), label = 'Payroll'),
list(method = 'update', args = list(list(visible = c(FALSE, FALSE, TRUE, FALSE, FALSE, FALSE)), list(title = 'Average Ticket Price')), label = 'Ticket Price'),
list(method = 'update', args = list(list(visible = c(FALSE, FALSE, FALSE, TRUE, FALSE, FALSE)), list(title = 'Revenue')), label = 'Revenue'),
list(method = 'update', args = list(list(visible = c(FALSE, FALSE, FALSE, FALSE, TRUE, FALSE)), list(title = 'Pitcher\'s Park Factor')), label = 'PPF'),
list(method = 'update', args = list(list(visible = c(FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), list(title = 'Batter\'s Park Factor')), label = 'BPF')
)
)
)
)
# Show the plot
final_plot
library(plotly)
library(dplyr)
# Assuming stadium_final is your data frame and it contains Year, Attendance, Est. Payroll, Ticket Price, Revenue, PPF, BPF
# Create a base plot with hover text
p <- plot_ly(stadium_final, x = ~Year, y = ~Attendance, type = 'scatter', mode = 'lines+markers', name = 'Attendance',
text = ~paste("Year:", Year, "<br>Attendance:", format(Attendance, big.mark = ",", scientific = FALSE)), hoverinfo = 'text')
# Add other traces with their respective hover text
p <- p %>% add_trace(y = ~`Est. Payroll`, name = "Estimated Payroll", visible = F,
text = ~paste("Year:", Year, "<br>Payroll:", format(`Est. Payroll`, big.mark = ",", scientific = FALSE)), hoverinfo = 'text')
p <- p %>% add_trace(y = ~`Ticket Price`, name = "Average Ticket Price", visible = F,
text = ~paste("Year:", Year, "<br>Price:", `Ticket Price`, "$"), hoverinfo = 'text')
p <- p %>% add_trace(y = ~Revenue, name = "Revenue", visible = F,
text = ~paste("Year:", Year, "<br>Revenune in Millions:", Revenue), hoverinfo = 'text')
p <- p %>% add_trace(y = ~PPF, name = "Pitcher's Park Factor", visible = F,
text = ~paste("Year:", Year, "<br>Factor Value:", PPF), hoverinfo = 'text')
p <- p %>% add_trace(y = ~BPF, name = "Batter's Park Factor", visible = F,
text = ~paste("Year:", Year, "<br>Factor Value:", BPF), hoverinfo = 'text')
# Define layout and buttons for interactivity
final_plot <- p %>% layout(
title = 'Interactive Visualization of Washington Nationals Statistics',
xaxis = list(title = 'Year'),
yaxis = list(title = 'Value'),
updatemenus = list(
list(
type = 'buttons',
direction = 'left',
x = 0,
xanchor = 'left',
y = -0.2,
yanchor = 'top',
buttons = list(
list(method = 'update', args = list(list(visible = c(TRUE, FALSE, FALSE, FALSE, FALSE, FALSE)), list(title = 'Attendance')), label = 'Attendance'),
list(method = 'update', args = list(list(visible = c(FALSE, TRUE, FALSE, FALSE, FALSE, FALSE)), list(title = 'Estimated Payroll')), label = 'Payroll'),
list(method = 'update', args = list(list(visible = c(FALSE, FALSE, TRUE, FALSE, FALSE, FALSE)), list(title = 'Average Ticket Price')), label = 'Ticket Price'),
list(method = 'update', args = list(list(visible = c(FALSE, FALSE, FALSE, TRUE, FALSE, FALSE)), list(title = 'Revenue')), label = 'Revenue'),
list(method = 'update', args = list(list(visible = c(FALSE, FALSE, FALSE, FALSE, TRUE, FALSE)), list(title = 'Pitcher\'s Park Factor')), label = 'PPF'),
list(method = 'update', args = list(list(visible = c(FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)), list(title = 'Batter\'s Park Factor')), label = 'BPF')
)
)
)
)
# Show the plot
final_plot
# Create an interactive pie chart for 2023
pie_chart_2023 <- plot_ly(
labels = ~salary_2023_final$Pos,            # Labels from the 'brands' vector
values = ~salary_2023_final$salary_sum_2023,      # Values from the 'market_share' vector
type = 'pie',                # Specify the chart type to be pie
textinfo = 'percent',  # Display labels and percentage on the chart
hovertext = ~paste("Total Salary:", format(salary_total_2023, big.mark = ",", scientific = FALSE), "<br>Position:", salary_2023_final$Pos, "<br>Salary:",salary_2023_final$salary_sum_2023),
textposition = 'inside',     # Position the text inside the slices
marker = list(
colors = c('#0072B2','#F0E442', '#D55E00', '#CC79A7', '#009E73'), # Assign new colors
line = list(color = '#FFFFFF', width = 2)  # Set slice borders
),
# height = sqrt(salary_total_2023)/30,
# width = sqrt(salary_total_2023)/30
)
# Adding title and enhancing the layout
pie_chart_2023 <- layout(pie_chart_2023,
title = 'Nationals Salaries By Positions in 2023')
pie_chart_2023
# Create an interactive pie chart for 2023
pie_chart_2023 <- plot_ly(
labels = ~salary_2023_final$Pos,            # Labels from the 'brands' vector
values = ~salary_2023_final$salary_sum_2023,      # Values from the 'market_share' vector
type = 'pie',                # Specify the chart type to be pie
text = ~paste("Total Salary:", format(salary_total_2023, big.mark = ",", scientific = FALSE), "<br>Position:", salary_2023_final$Pos, "<br>Salary:",salary_2023_final$salary_sum_2023)
textinfo = 'percent',  # Display labels and percentage on the chart
# Create an interactive pie chart for 2023
pie_chart_2023 <- plot_ly(
labels = ~salary_2023_final$Pos,            # Labels from the 'brands' vector
values = ~salary_2023_final$salary_sum_2023,      # Values from the 'market_share' vector
type = 'pie',                # Specify the chart type to be pie
text = ~paste("Total Salary:", format(salary_total_2023, big.mark = ",", scientific = FALSE), "<br>Position:", salary_2023_final$Pos, "<br>Salary:",salary_2023_final$salary_sum_2023),
textinfo = 'percent',  # Display labels and percentage on the chart
hovertext = "text",
textposition = 'inside',     # Position the text inside the slices
marker = list(
colors = c('#0072B2','#F0E442', '#D55E00', '#CC79A7', '#009E73'), # Assign new colors
line = list(color = '#FFFFFF', width = 2)  # Set slice borders
),
# height = sqrt(salary_total_2023)/30,
# width = sqrt(salary_total_2023)/30
)
# Adding title and enhancing the layout
pie_chart_2023 <- layout(pie_chart_2023,
title = 'Nationals Salaries By Positions in 2023')
pie_chart_2023
# Create an interactive pie chart for 2023
pie_chart_2023 <- plot_ly(
labels = ~salary_2023_final$Pos,            # Labels from the 'brands' vector
values = ~salary_2023_final$salary_sum_2023,      # Values from the 'market_share' vector
type = 'pie',                # Specify the chart type to be pie
text = ~paste("Total Salary:", format(salary_total_2023, big.mark = ",", scientific = FALSE), "<br>Position:", salary_2023_final$Pos, "<br>Salary:",salary_2023_final$salary_sum_2023),
textinfo = 'percent',  # Display labels and percentage on the chart
hoverinfo = "text",
textposition = 'inside',     # Position the text inside the slices
marker = list(
colors = c('#0072B2','#F0E442', '#D55E00', '#CC79A7', '#009E73'), # Assign new colors
line = list(color = '#FFFFFF', width = 2)  # Set slice borders
),
# height = sqrt(salary_total_2023)/30,
# width = sqrt(salary_total_2023)/30
)
# Adding title and enhancing the layout
pie_chart_2023 <- layout(pie_chart_2023,
title = 'Nationals Salaries By Positions in 2023')
pie_chart_2023
# Create an interactive pie chart for 2023
pie_chart_2023 <- plot_ly(
labels = ~salary_2023_final$Pos,            # Labels from the 'brands' vector
values = ~salary_2023_final$salary_sum_2023,      # Values from the 'market_share' vector
type = 'pie',                # Specify the chart type to be pie
text = ~paste("Total Salary:", format(salary_total_2023, big.mark = ",", scientific = FALSE), "<br>Position:", salary_2023_final$Pos, "<br>Salary:",format(salary_2023_final$salary_sum_2023, big.mark = ",", scientific = FALSE)),
textinfo = 'percent',  # Display labels and percentage on the chart
hoverinfo = "text",
textposition = 'inside',     # Position the text inside the slices
marker = list(
colors = c('#0072B2','#F0E442', '#D55E00', '#CC79A7', '#009E73'), # Assign new colors
line = list(color = '#FFFFFF', width = 2)  # Set slice borders
),
# height = sqrt(salary_total_2023)/30,
# width = sqrt(salary_total_2023)/30
)
# Adding title and enhancing the layout
pie_chart_2023 <- layout(pie_chart_2023,
title = 'Nationals Salaries By Positions in 2023')
pie_chart_2023
library(plotly)
# Create an interactive pie chart for 2019
pie_chart_2019 <- plot_ly(
labels = ~salary_2019_final$Pos,            # Labels from the 'brands' vector
values = ~salary_2019_final$salary_sum_2019,      # Values from the 'market_share' vector
text = ~paste("2019 Total Payroll:", format(salary_total_2019, big.mark = ",", scientific = FALSE), "<br>Position:", salary_2019_final$Pos, "<br>Salary:",format(salary_2019_final$salary_sum_2019, big.mark = ",", scientific = FALSE)),
type = 'pie',                # Specify the chart type to be pie
textinfo = 'percent',  # Display labels and percentage on the chart
hoverinfo = 'text',
textposition = 'inside',     # Position the text inside the slices
marker = list(
colors = c('#0072B2', '#D55E00', '#CC79A7', '#F0E442', '#009E73'), # Assign new colors
line = list(color = '#FFFFFF', width = 2)  # Set slice borders
),
# height = sqrt(salary_total_2019)/30,
# width = sqrt(salary_total_2019)/30
)
# Adding title and enhancing the layout
pie_chart_2019 <- layout(pie_chart_2019,
title = 'Nationals Salaries By Positions in 2019')
pie_chart_2019
# Create pie chart for the first dataset
pie1 <- plot_ly(salary_2023_final, labels = ~Pos, values = ~salary_sum_2023, type = 'pie',
text = ~paste("2023 Total Payroll:", format(salary_total_2023, big.mark = ",", scientific = FALSE), "<br>Position:", salary_2023_final$Pos, "<br>Salary:",format(salary_2023_final$salary_sum_2023, big.mark = ",", scientific = FALSE)),
hoverinfo = 'text',
textposition = 'inside',     # Position the text inside the slices
marker = list(
colors = c('#0072B2','#F0E442', '#D55E00', '#CC79A7', '#009E73'), # Assign new colors
line = list(color = '#FFFFFF', width = 2)  # Set slice borders
),
domain = list(x = c(0, 0.4), y = c(0, 0.5)),
name = "2023 Payroll") %>%
layout(title = "2023 Payroll Allocations", showlegend = TRUE)
# Create pie chart for the second dataset
pie2 <- plot_ly(salary_2019_final, labels = ~Pos, values = ~salary_sum_2019, type = 'pie',
text = ~paste("2019 Total Payroll:", format(salary_total_2019, big.mark = ",", scientific = FALSE), "<br>Position:", salary_2019_final$Pos, "<br>Salary:",format(salary_2019_final$salary_sum_2019, big.mark = ",", scientific = FALSE)),
hoverinfo = 'text',
textposition = 'inside',     # Position the text inside the slices
marker = list(
colors = c('#0072B2','#F0E442', '#FF0000', '#CC79A7', '#009E73'), # Assign new colors
line = list(color = '#FFFFFF', width = 2)  # Set slice borders
),
domain = list(x = c(0.4, 1), y = c(0, 1)),
name = "2019 Payroll") %>%
layout(title = "2019 Payroll Allocations", showlegend = TRUE)
# Combine the pie charts side by side
subplot(pie1, pie2, nrows = 1, shareX = TRUE, shareY = TRUE, titleX = TRUE) %>%
layout(title = "Payroll Pie Charts, 2023(Left) Versus 2019(Right)")
# Create pie chart for the first dataset
pie1 <- plot_ly(salary_2023_final, labels = ~Pos, values = ~salary_sum_2023, type = 'pie',
textinfo = 'percent',
text = ~paste("2023 Total Payroll:", format(salary_total_2023, big.mark = ",", scientific = FALSE), "<br>Position:", salary_2023_final$Pos, "<br>Salary:",format(salary_2023_final$salary_sum_2023, big.mark = ",", scientific = FALSE)),
hoverinfo = 'text',
textposition = 'inside',     # Position the text inside the slices
marker = list(
colors = c('#0072B2','#F0E442', '#D55E00', '#CC79A7', '#009E73'), # Assign new colors
line = list(color = '#FFFFFF', width = 2)  # Set slice borders
),
domain = list(x = c(0, 0.4), y = c(0, 0.5)),
name = "2023 Payroll") %>%
layout(title = "2023 Payroll Allocations", showlegend = TRUE)
# Create pie chart for the second dataset
pie2 <- plot_ly(salary_2019_final, labels = ~Pos, values = ~salary_sum_2019, type = 'pie',
textinfo = 'percent',
text = ~paste("2019 Total Payroll:", format(salary_total_2019, big.mark = ",", scientific = FALSE), "<br>Position:", salary_2019_final$Pos, "<br>Salary:",format(salary_2019_final$salary_sum_2019, big.mark = ",", scientific = FALSE)),
hoverinfo = 'text',
textposition = 'inside',     # Position the text inside the slices
marker = list(
colors = c('#0072B2','#F0E442', '#FF0000', '#CC79A7', '#009E73'), # Assign new colors
line = list(color = '#FFFFFF', width = 2)  # Set slice borders
),
domain = list(x = c(0.4, 1), y = c(0, 1)),
name = "2019 Payroll") %>%
layout(title = "2019 Payroll Allocations", showlegend = TRUE)
# Combine the pie charts side by side
subplot(pie1, pie2, nrows = 1, shareX = TRUE, shareY = TRUE, titleX = TRUE) %>%
layout(title = "Payroll Pie Charts, 2023(Left) Versus 2019(Right)")
