---
title: "Injury Analysis"
author: "Zhuoyan Guo"
format: html
execute:
    echo: true
    warning: false
    message: false
    freeze: auto
---

```{python}
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
```

## 2023 Injury Timeline Interactive
```{python}

position_full_names = {
    'SP': 'Starting Pitcher',
    '3B': 'Third Baseman',
    'RP': 'Relief Pitcher',
    'C': 'Catcher',
    'OF': 'Outfielder',
    'INF/OF': 'Infielder/Outfielder'
}

injury2023['Pos'] = injury2023['Pos'].map(position_full_names)


import plotly.express as px

fig = px.timeline(
    injury2023,
    x_start="Injury / Surgery Date",
    x_end="Eligible to Return",
    y="Pos",
    color="Pos",
    hover_name="Name",
    title='2023 Washington Nationals Injury Timeline'
)

# Customizing the hover data
fig.update_traces(
    hoverinfo='text',
    hovertext=injury2023['Name']
)

# Update the layout to set the figure width
fig.update_layout(
    width=800,  # Set the width of the figure (in pixels)
    xaxis=dict(
        range=[season_start, season_end],
        title='Date'
    ),
    yaxis=dict(
        autorange="reversed",  # Ensure positions go top-down
        title='Player Position'
    )
)

# Reducing label clutter by adding text only on hover
fig.update_traces(texttemplate='%{hovertext}', textposition='inside')

# Zooming and panning
fig.update_xaxes(
    range=[season_start, season_end],
    rangeselector=dict(
        buttons=list([
            dict(step='all'),
            dict(step='month', count=1, label='1m'),
            dict(step='month', count=3, label='3m'),
            dict(step='month', count=6, label='6m'),
        ])
    ),
    rangeslider=dict(visible=True)
)

# Update y-axes: reverse the order
fig.update_yaxes(autorange="reversed")

# Add a vertical line for the start of the season
fig.add_vline(x=season_start, line_width=2, line_dash="dash", line_color="green")

# Add a vertical line for the end of the season
fig.add_vline(x=season_end, line_width=2, line_dash="dash", line_color="red")

# Add text annotation for the season start
fig.add_annotation(
    x=season_start, y=0, text="Season Start",
    xref="x", yref="paper",
    showarrow=False, yshift=-20, bgcolor="white", bordercolor="green", borderwidth=2
)

# Add text annotation for the season end
fig.add_annotation(
    x=season_end, y=0, text="Season End",
    xref="x", yref="paper",
    showarrow=False, yshift=-20, bgcolor="white", bordercolor="red", borderwidth=2
)


fig.show()
```

## 2020 Injury Timeline Interactive
```{python}

injury2020 = pd.read_csv('../data/2020 Injury Data.csv')
injury2020 = injury2020[injury2020['Name'] != 'Wander Suero']


```

```{python}
position_full_names = {
    'SP': 'Starting Pitcher',
    '3B': 'Third Baseman',
    'RP': 'Relief Pitcher',
    'C': 'Catcher',
    'OF': 'Outfielder',
    'INF/OF': 'Infielder/Outfielder'
}

injury2020['Pos'] = injury2020['Pos'].map(position_full_names)

# Convert the 'Injury Date' and 'Eligible to Return Date' to datetime
injury2020['Injury / Surgery Date'] = pd.to_datetime(injury2020['Injury / Surgery Date'])
injury2020['Eligible to Return'] = pd.to_datetime(injury2020['Eligible to Return'])


# Drop rows where any of the dates are missing
injury2020.dropna(subset=['Injury / Surgery Date', 'Eligible to Return'], inplace=True)

# Sort the DataFrame based on injury date to have a sequential timeline
injury2020.sort_values('Injury / Surgery Date', inplace=True)

season_start = pd.Timestamp('2020-07-23')
season_end = pd.Timestamp('2020-09-27')

import plotly.express as px

fig = px.timeline(
    injury2020,
    x_start="Injury / Surgery Date",
    x_end="Eligible to Return",
    y="Pos",
    color="Pos",
    hover_name="Name",
    title='2020 Washington Nationals Injury Timeline'
)

# Customizing the hover data
# fig.update_traces(
#     hoverinfo='text',
#     hovertext=injury2020['Name']
# )

# fig.update_traces(hovertext=injury2020['Name'])

# Update the layout to set the figure width
fig.update_layout(
    width=800,  # Set the width of the figure (in pixels)
    xaxis=dict(
        range=[season_start, season_end],
        title='Date'
    ),
    yaxis=dict(
        autorange="reversed",  # Ensure positions go top-down
        title='Player Position'
    )
)

# Reducing label clutter by adding text only on hover
fig.update_traces(texttemplate='%{hovertext}', textposition='inside')

# Zooming and panning
fig.update_xaxes(
    range=[season_start, season_end],
    rangeselector=dict(
        buttons=list([
            dict(step='all'),
            dict(step='month', count=1, label='1m'),
            dict(step='month', count=3, label='3m'),
            dict(step='month', count=6, label='6m'),
        ])
    ),
    rangeslider=dict(visible=True)
)

# Update y-axes: reverse the order
fig.update_yaxes(autorange="reversed")

# Add a vertical line for the start of the season
fig.add_vline(x=season_start, line_width=2, line_dash="dash", line_color="green")

# Add a vertical line for the end of the season
fig.add_vline(x=season_end, line_width=2, line_dash="dash", line_color="red")

# Add text annotation for the season start
fig.add_annotation(
    x=season_start, y=0, text="Season Start",
    xref="x", yref="paper",
    showarrow=False, yshift=-20, bgcolor="white", bordercolor="green", borderwidth=2
)

# Add text annotation for the season end
fig.add_annotation(
    x=season_end, y=0, text="Season End",
    xref="x", yref="paper",
    showarrow=False, yshift=-20, bgcolor="white", bordercolor="red", borderwidth=2
)


fig.show()
```

## 2021 Injury Timeline Interactive
```{python}

injury2021 = pd.read_csv('../data/2021 Injury Data.csv')
injury2021 = injury2021[injury2021['Name'] != 'Wander Suero']


```

```{python}
position_full_names = {
    'SP': 'Starting Pitcher',
    '3B': 'Third Baseman',
    'RP': 'Relief Pitcher',
    'C': 'Catcher',
    'OF': 'Outfielder',
    'INF/OF': 'Infielder/Outfielder'
}

injury2021['Pos'] = injury2021['Pos'].map(position_full_names)

# Convert the 'Injury Date' and 'Eligible to Return Date' to datetime
injury2021['Injury / Surgery Date'] = pd.to_datetime(injury2021['Injury / Surgery Date'])
injury2021['Eligible to Return'] = pd.to_datetime(injury2021['Eligible to Return'])


# Drop rows where any of the dates are missing
injury2021.dropna(subset=['Injury / Surgery Date', 'Eligible to Return'], inplace=True)

# Sort the DataFrame based on injury date to have a sequential timeline
injury2021.sort_values('Injury / Surgery Date', inplace=True)

season_start = pd.Timestamp('2021-04-01')
season_end = pd.Timestamp('2021-10-03')

import plotly.express as px

fig = px.timeline(
    injury2021,
    x_start="Injury / Surgery Date",
    x_end="Eligible to Return",
    y="Pos",
    color="Pos",
    title='2021 Washington Nationals Injury Timeline'
)

# Customizing the hover data
fig.update_traces(
    hoverinfo='text',
    hovertext=injury2021['Name']
)

# Update the layout to set the figure width
fig.update_layout(
    width=800,  # Set the width of the figure (in pixels)
    xaxis=dict(
        range=[season_start, season_end],
        title='Date'
    ),
    yaxis=dict(
        autorange="reversed",  # Ensure positions go top-down
        title='Player Position'
    )
)

# Reducing label clutter by adding text only on hover
fig.update_traces(texttemplate='%{hovertext}', textposition='inside')

# Zooming and panning
fig.update_xaxes(
    range=[season_start, season_end],
    rangeselector=dict(
        buttons=list([
            dict(step='all'),
            dict(step='month', count=1, label='1m'),
            dict(step='month', count=3, label='3m'),
            dict(step='month', count=6, label='6m'),
        ])
    ),
    rangeslider=dict(visible=True)
)

# Update y-axes: reverse the order
fig.update_yaxes(autorange="reversed")

# Add a vertical line for the start of the season
fig.add_vline(x=season_start, line_width=2, line_dash="dash", line_color="green")

# Add a vertical line for the end of the season
fig.add_vline(x=season_end, line_width=2, line_dash="dash", line_color="red")

# Add text annotation for the season start
fig.add_annotation(
    x=season_start, y=0, text="Season Start",
    xref="x", yref="paper",
    showarrow=False, yshift=-20, bgcolor="white", bordercolor="green", borderwidth=2
)

# Add text annotation for the season end
fig.add_annotation(
    x=season_end, y=0, text="Season End",
    xref="x", yref="paper",
    showarrow=False, yshift=-20, bgcolor="white", bordercolor="red", borderwidth=2
)


fig.show()
```

## 2022 Injury Timeline Interactive
```{python}

injury2022 = pd.read_csv('../data/2022 Injury Data.csv')
injury2022 = injury2022[~injury2022['Name'].isin(['Sean Doolittle', 'Seth Romero'])]


```

```{python}
position_full_names = {
    'SP': 'Starting Pitcher',
    '3B': 'Third Baseman',
    'RP': 'Relief Pitcher',
    'C': 'Catcher',
    'OF': 'Outfielder',
    'INF/OF': 'Infielder/Outfielder'
}

injury2022['Pos'] = injury2022['Pos'].map(position_full_names)

# Convert the 'Injury Date' and 'Eligible to Return Date' to datetime
injury2022['Injury / Surgery Date'] = pd.to_datetime(injury2022['Injury / Surgery Date'])
injury2022['Eligible to Return'] = pd.to_datetime(injury2022['Eligible to Return'])


# Drop rows where any of the dates are missing
injury2022.dropna(subset=['Injury / Surgery Date', 'Eligible to Return'], inplace=True)

# Sort the DataFrame based on injury date to have a sequential timeline
injury2022.sort_values('Injury / Surgery Date', inplace=True)

season_start = pd.Timestamp('2022-04-07')
season_end = pd.Timestamp('2022-11-05')

import plotly.express as px

fig = px.timeline(
    injury2022,
    x_start="Injury / Surgery Date",
    x_end="Eligible to Return",
    y="Pos",
    color="Pos",
    title='2022 Washington Nationals Injury Timeline'
)

# Customizing the hover data
fig.update_traces(
    hoverinfo='text',
    hovertext=injury2022['Name']
)

# Update the layout to set the figure width
fig.update_layout(
    width=800,  # Set the width of the figure (in pixels)
    xaxis=dict(
        range=[season_start, season_end],
        title='Date'
    ),
    yaxis=dict(
        autorange="reversed",  # Ensure positions go top-down
        title='Player Position'
    )
)

# Reducing label clutter by adding text only on hover
fig.update_traces(texttemplate='%{hovertext}', textposition='inside')

# Zooming and panning
fig.update_xaxes(
    range=[season_start, season_end],
    rangeselector=dict(
        buttons=list([
            dict(step='all'),
            dict(step='month', count=1, label='1m'),
            dict(step='month', count=3, label='3m'),
            dict(step='month', count=6, label='6m'),
        ])
    ),
    rangeslider=dict(visible=True)
)

# Update y-axes: reverse the order
fig.update_yaxes(autorange="reversed")

# Add a vertical line for the start of the season
fig.add_vline(x=season_start, line_width=2, line_dash="dash", line_color="green")

# Add a vertical line for the end of the season
fig.add_vline(x=season_end, line_width=2, line_dash="dash", line_color="red")

# Add text annotation for the season start
fig.add_annotation(
    x=season_start, y=0, text="Season Start",
    xref="x", yref="paper",
    showarrow=False, yshift=-20, bgcolor="white", bordercolor="green", borderwidth=2
)

# Add text annotation for the season end
fig.add_annotation(
    x=season_end, y=0, text="Season End",
    xref="x", yref="paper",
    showarrow=False, yshift=-20, bgcolor="white", bordercolor="red", borderwidth=2
)


fig.show()
```

## 2023 Injury Timeline Interactive
```{python}

injury2023 = pd.read_csv('../data/2023 Injury Data.csv')
injury2023 = injury2023[injury2023['Name'] != 'Víctor Arano']


```

```{python}
position_full_names = {
    'SP': 'Starting Pitcher',
    '3B': 'Third Baseman',
    'RP': 'Relief Pitcher',
    'C': 'Catcher',
    'OF': 'Outfielder',
    'INF/OF': 'Infielder/Outfielder'
}

injury2023['Pos'] = injury2023['Pos'].map(position_full_names)

# Convert the 'Injury Date' and 'Eligible to Return Date' to datetime
injury2023['Injury / Surgery Date'] = pd.to_datetime(injury2023['Injury / Surgery Date'])
injury2023['Eligible to Return'] = pd.to_datetime(injury2023['Eligible to Return'])


# Drop rows where any of the dates are missing
injury2023.dropna(subset=['Injury / Surgery Date', 'Eligible to Return'], inplace=True)

# Sort the DataFrame based on injury date to have a sequential timeline
injury2023.sort_values('Injury / Surgery Date', inplace=True)

season_start = pd.Timestamp('2023-03-30')
season_end = pd.Timestamp('2023-11-01')

import plotly.express as px

fig = px.timeline(
    injury2023,
    x_start="Injury / Surgery Date",
    x_end="Eligible to Return",
    y="Pos",
    color="Pos",
    hover_name="Name",
    title='2023 Washington Nationals Injury Timeline'
)

# Customizing the hover data
# fig.update_traces(
#     hoverinfo='text',
#     hovertext=injury2020['Name']
# )

# fig.update_traces(hovertext=injury2020['Name'])

# Update the layout to set the figure width
fig.update_layout(
    width=800,  # Set the width of the figure (in pixels)
    xaxis=dict(
        range=[season_start, season_end],
        title='Date'
    ),
    yaxis=dict(
        autorange="reversed",  # Ensure positions go top-down
        title='Player Position'
    )
)

# Reducing label clutter by adding text only on hover
fig.update_traces(texttemplate='%{hovertext}', textposition='inside')

# Zooming and panning
fig.update_xaxes(
    range=[season_start, season_end],
    rangeselector=dict(
        buttons=list([
            dict(step='all'),
            dict(step='month', count=1, label='1m'),
            dict(step='month', count=3, label='3m'),
            dict(step='month', count=6, label='6m'),
        ])
    ),
    rangeslider=dict(visible=True)
)

# Update y-axes: reverse the order
fig.update_yaxes(autorange="reversed")

# Add a vertical line for the start of the season
fig.add_vline(x=season_start, line_width=2, line_dash="dash", line_color="green")

# Add a vertical line for the end of the season
fig.add_vline(x=season_end, line_width=2, line_dash="dash", line_color="red")

# Add text annotation for the season start
fig.add_annotation(
    x=season_start, y=0, text="Season Start",
    xref="x", yref="paper",
    showarrow=False, yshift=-20, bgcolor="white", bordercolor="green", borderwidth=2
)

# Add text annotation for the season end
fig.add_annotation(
    x=season_end, y=0, text="Season End",
    xref="x", yref="paper",
    showarrow=False, yshift=-20, bgcolor="white", bordercolor="red", borderwidth=2
)


fig.show()
```